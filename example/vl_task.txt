setting dependencies
To maintain the virtual link indices
Another virtual request arrived
To maintain the virtual link indices
Another virtual request arrived
To maintain the virtual link indices
Another virtual request arrived
To maintain the virtual link indices
Another virtual request arrived
To maintain the virtual link indices
Another virtual request arrived
last_virtual_index -1
----------Enatanglement Generation Task----------
Current node in Entanglement generation s4
Path-------- ['a', 's1', 's2', 's3', 's4']
Reservation------ a s4 0
type(self.action) : <class 'NoneType'>
action:   None
depedencies for task:   TaskEntGen_s4_s3   are   []
Initialized the dependencies_subtask_map
current status:	 {}
type(self.action) : <class 'function'>
action:   <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_purify_action at 0x1484b68b0>
depedencies for task:   TaskPurifyLefts4s3   are   ['TaskEntGen_s4_s3']
Initialized the dependencies_subtask_map
current status:	 {<qntsim.resource_management.task_manager.Task object at 0x14922e970>: []}
Swap at node: s1 left: a and right: s2
Swap at node: s2 left: a and right: s4
Swap at node: s3 left: s2 and right: s4
order of swaps:  [(('a', 's2', 's1'), 2), (('s2', 's4', 's3'), 2), (('a', 's4', 's2'), 4)]
type(self.action) : <class 'function'>
action:   <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action at 0x1484b6a60>
depedencies for task:   TaskSwapRightEnds4s2   are   ['TaskPurifyLefts4s3']
Initialized the dependencies_subtask_map
current status:	 {<qntsim.resource_management.task_manager.Task object at 0x14922e9a0>: []}
ENT_SWAP_RIGHT at:  s4
type(self.action) : <class 'function'>
action:   <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action at 0x1484b6b80>
final swap flagged to true
depedencies for task:   TaskSwapRightEnds4a   are   ['TaskSwapRightEnds4s2']
Initialized the dependencies_subtask_map
current status:	 {<qntsim.resource_management.task_manager.Task object at 0x14922ea00>: []}
ENT_SWAP_RIGHT at:  s4
tasks created at s4
setting dependencies
To maintain the virtual link indices
Another virtual request arrived
To maintain the virtual link indices
Another virtual request arrived
To maintain the virtual link indices
Another virtual request arrived
To maintain the virtual link indices
Another virtual request arrived
To maintain the virtual link indices
Another virtual request arrived
To maintain the virtual link indices
Another virtual request arrived
To maintain the virtual link indices
Another virtual request arrived
To maintain the virtual link indices
Another virtual request arrived
To maintain the virtual link indices
Another virtual request arrived
To maintain the virtual link indices
Another virtual request arrived
last_virtual_index -1
----------Enatanglement Generation Task----------
Current node in Entanglement generation s3
Path-------- ['a', 's1', 's2', 's3', 's4']
Reservation------ a s4 0
type(self.action) : <class 'NoneType'>
action:   None
depedencies for task:   TaskEntGen_s3_s2   are   []
Initialized the dependencies_subtask_map
current status:	 {}
current node, mem_indices, available_memory_indices:  s3 [5, 6, 7, 8, 9] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
type(self.action) : <class 'NoneType'>
action:   None
depedencies for task:   TaskEntGen_s3_s4   are   []
Initialized the dependencies_subtask_map
current status:	 {}
type(self.action) : <class 'function'>
action:   <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_purify_action at 0x1484b6dc0>
depedencies for task:   TaskPurifyLefts3s2   are   ['TaskEntGen_s3_s2']
Initialized the dependencies_subtask_map
current status:	 {<qntsim.resource_management.task_manager.Task object at 0x14923b790>: []}
type(self.action) : <class 'function'>
action:   <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_purify_action at 0x1484b6ee0>
depedencies for task:   TaskPurifyRights3s4   are   ['TaskEntGen_s3_s4']
Initialized the dependencies_subtask_map
current status:	 {<qntsim.resource_management.task_manager.Task object at 0x14923b760>: []}
Swap at node: s1 left: a and right: s2
Swap at node: s2 left: a and right: s4
Swap at node: s3 left: s2 and right: s4
order of swaps:  [(('a', 's2', 's1'), 2), (('s2', 's4', 's3'), 2), (('a', 's4', 's2'), 4)]
while setting task action: left :s2 right: s4 and mid: s3 and self.own.name: s3
type(self.action) : <class 'function'>
action:   <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle at 0x1492410d0>
depedencies for task:   TaskSwapMiddles4s2   are   ['TaskPurifyRights3s4', 'TaskPurifyLefts3s2']
Initialized the dependencies_subtask_map
current status:	 {<qntsim.resource_management.task_manager.Task object at 0x14923b820>: [], <qntsim.resource_management.task_manager.Task object at 0x14923b7f0>: []}
ENT_SWAP_MIDDLE at:  s3
last_left_task   :  TaskPurifyRights3s4
last_right_task   :  TaskPurifyLefts3s2
setting dependencies
To maintain the virtual link indices
Another virtual request arrived
To maintain the virtual link indices
Another virtual request arrived
To maintain the virtual link indices
Another virtual request arrived
To maintain the virtual link indices
Another virtual request arrived
To maintain the virtual link indices
Another virtual request arrived
To maintain the virtual link indices
Another virtual request arrived
To maintain the virtual link indices
Another virtual request arrived
To maintain the virtual link indices
Another virtual request arrived
To maintain the virtual link indices
Another virtual request arrived
To maintain the virtual link indices
Another virtual request arrived
last_virtual_index -1
----------Enatanglement Generation Task----------
Current node in Entanglement generation s2
Path-------- ['a', 's1', 's2', 's3', 's4']
Reservation------ a s4 0
type(self.action) : <class 'NoneType'>
action:   None
depedencies for task:   TaskEntGen_s2_s1   are   []
Initialized the dependencies_subtask_map
current status:	 {}
current node, mem_indices, available_memory_indices:  s2 [5, 6, 7, 8, 9] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
type(self.action) : <class 'NoneType'>
action:   None
depedencies for task:   TaskEntGen_s2_s3   are   []
Initialized the dependencies_subtask_map
current status:	 {}
type(self.action) : <class 'function'>
action:   <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_purify_action at 0x149241280>
depedencies for task:   TaskPurifyLefts2s1   are   ['TaskEntGen_s2_s1']
Initialized the dependencies_subtask_map
current status:	 {<qntsim.resource_management.task_manager.Task object at 0x14923bfa0>: []}
type(self.action) : <class 'function'>
action:   <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_purify_action at 0x1492413a0>
depedencies for task:   TaskPurifyRights2s3   are   ['TaskEntGen_s2_s3']
Initialized the dependencies_subtask_map
current status:	 {<qntsim.resource_management.task_manager.Task object at 0x14923bf70>: []}
Swap at node: s1 left: a and right: s2
Swap at node: s2 left: a and right: s4
Swap at node: s3 left: s2 and right: s4
order of swaps:  [(('a', 's2', 's1'), 2), (('s2', 's4', 's3'), 2), (('a', 's4', 's2'), 4)]
type(self.action) : <class 'function'>
action:   <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action at 0x149241550>
depedencies for task:   TaskSwapRightEnds2a   are   ['TaskPurifyLefts2s1']
Initialized the dependencies_subtask_map
current status:	 {<qntsim.resource_management.task_manager.Task object at 0x149244040>: []}
ENT_SWAP_RIGHT at:  s2
type(self.action) : <class 'function'>
action:   <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action at 0x149241670>
depedencies for task:   TaskSwapLeftEnds2s4   are   ['TaskPurifyRights2s3']
Initialized the dependencies_subtask_map
current status:	 {<qntsim.resource_management.task_manager.Task object at 0x149244070>: []}
ENT_SWAP_LEFT at:  s2
while setting task action: left :a right: s4 and mid: s2 and self.own.name: s2
type(self.action) : <class 'function'>
action:   <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle at 0x149241790>
depedencies for task:   TaskSwapMiddles4a   are   ['TaskSwapLeftEnds2s4', 'TaskSwapRightEnds2a']
Initialized the dependencies_subtask_map
current status:	 {<qntsim.resource_management.task_manager.Task object at 0x149244130>: [], <qntsim.resource_management.task_manager.Task object at 0x1492440d0>: []}
ENT_SWAP_MIDDLE at:  s2
last_left_task   :  TaskSwapLeftEnds2s4
last_right_task   :  TaskSwapRightEnds2a
setting dependencies
To maintain the virtual link indices
Another virtual request arrived
To maintain the virtual link indices
Another virtual request arrived
To maintain the virtual link indices
Another virtual request arrived
To maintain the virtual link indices
Another virtual request arrived
To maintain the virtual link indices
Another virtual request arrived
To maintain the virtual link indices
Another virtual request arrived
To maintain the virtual link indices
Another virtual request arrived
To maintain the virtual link indices
Another virtual request arrived
To maintain the virtual link indices
Another virtual request arrived
To maintain the virtual link indices
Another virtual request arrived
last_virtual_index -1
----------Enatanglement Generation Task----------
Current node in Entanglement generation s1
Path-------- ['a', 's1', 's2', 's3', 's4']
Reservation------ a s4 0
type(self.action) : <class 'NoneType'>
action:   None
depedencies for task:   TaskEntGen_s1_a   are   []
Initialized the dependencies_subtask_map
current status:	 {}
current node, mem_indices, available_memory_indices:  s1 [5, 6, 7, 8, 9] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
type(self.action) : <class 'NoneType'>
action:   None
depedencies for task:   TaskEntGen_s1_s2   are   []
Initialized the dependencies_subtask_map
current status:	 {}
type(self.action) : <class 'function'>
action:   <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_purify_action at 0x1484b6af0>
depedencies for task:   TaskPurifyLefts1a   are   ['TaskEntGen_s1_a']
Initialized the dependencies_subtask_map
current status:	 {<qntsim.resource_management.task_manager.Task object at 0x14924f190>: []}
type(self.action) : <class 'function'>
action:   <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_purify_action at 0x1484b6e50>
depedencies for task:   TaskPurifyRights1s2   are   ['TaskEntGen_s1_s2']
Initialized the dependencies_subtask_map
current status:	 {<qntsim.resource_management.task_manager.Task object at 0x14924f160>: []}
Swap at node: s1 left: a and right: s2
Swap at node: s2 left: a and right: s4
Swap at node: s3 left: s2 and right: s4
order of swaps:  [(('a', 's2', 's1'), 2), (('s2', 's4', 's3'), 2), (('a', 's4', 's2'), 4)]
while setting task action: left :a right: s2 and mid: s1 and self.own.name: s1
type(self.action) : <class 'function'>
action:   <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle at 0x149241310>
depedencies for task:   TaskSwapMiddles2a   are   ['TaskPurifyRights1s2', 'TaskPurifyLefts1a']
Initialized the dependencies_subtask_map
current status:	 {<qntsim.resource_management.task_manager.Task object at 0x14924f220>: [], <qntsim.resource_management.task_manager.Task object at 0x14924f1f0>: []}
ENT_SWAP_MIDDLE at:  s1
last_left_task   :  TaskPurifyRights1s2
last_right_task   :  TaskPurifyLefts1a
tasks created at  a
setting dependencies
To maintain the virtual link indices
Another virtual request arrived
To maintain the virtual link indices
Another virtual request arrived
To maintain the virtual link indices
Another virtual request arrived
To maintain the virtual link indices
Another virtual request arrived
To maintain the virtual link indices
Another virtual request arrived
last_virtual_index -1
----------Enatanglement Generation Task----------
Current node in Entanglement generation a
Path-------- ['a', 's1', 's2', 's3', 's4']
Reservation------ a s4 0
current node, mem_indices, available_memory_indices:  a [0, 1, 2, 3, 4] [0, 1, 2, 3, 4]
type(self.action) : <class 'NoneType'>
action:   None
depedencies for task:   TaskEntGen_a_s1   are   []
Initialized the dependencies_subtask_map
current status:	 {}
type(self.action) : <class 'function'>
action:   <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_purify_action at 0x1492414c0>
depedencies for task:   TaskPurifyRightas1   are   ['TaskEntGen_a_s1']
Initialized the dependencies_subtask_map
current status:	 {<qntsim.resource_management.task_manager.Task object at 0x14924f970>: []}
Swap at node: s1 left: a and right: s2
Swap at node: s2 left: a and right: s4
Swap at node: s3 left: s2 and right: s4
order of swaps:  [(('a', 's2', 's1'), 2), (('s2', 's4', 's3'), 2), (('a', 's4', 's2'), 4)]
type(self.action) : <class 'function'>
action:   <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action at 0x149241820>
depedencies for task:   TaskSwapLeftEndas2   are   ['TaskPurifyRightas1']
Initialized the dependencies_subtask_map
current status:	 {<qntsim.resource_management.task_manager.Task object at 0x14924f9a0>: []}
ENT_SWAP_LEFT at:  a
type(self.action) : <class 'function'>
action:   <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action at 0x149241940>
final swap flagged to true
depedencies for task:   TaskSwapLeftEndas4   are   ['TaskSwapLeftEndas2']
Initialized the dependencies_subtask_map
current status:	 {<qntsim.resource_management.task_manager.Task object at 0x14924fa00>: []}
ENT_SWAP_LEFT at:  a
initiate_tasks running for node:  s1
Trying to initiate task:  TaskEntGen_s1_a and its already run flag is:  False
task name in action:  TaskEntGen_s1_a
len(subtasks):	 5
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s1_a  for node: s1 and memory returned for this: 0
dst, req_func:	 None None
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s1_a  for node: s1 and memory returned for this: 1
dst, req_func:	 None None
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s1_a  for node: s1 and memory returned for this: 2
dst, req_func:	 None None
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s1_a  for node: s1 and memory returned for this: 3
dst, req_func:	 None None
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s1_a  for node: s1 and memory returned for this: 4
dst, req_func:	 None None
Trying to initiate task:  TaskEntGen_s1_s2 and its already run flag is:  False
inside EG right task action:   TaskEntGen_s1_s2
len(subtasks):	 5
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s1_s2  for node: s1 and memory returned for this: 5
TASK_MANAGER_REQ_MESG curr_node: s1  dest:  s2  delay:  500000000.0 and expected message recv time:  2000500000000
dst, req_func:	 s2 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x149241b80>
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s1_s2  for node: s1 and memory returned for this: 6
TASK_MANAGER_REQ_MESG curr_node: s1  dest:  s2  delay:  500000000.0 and expected message recv time:  2000500000000
dst, req_func:	 s2 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x149241c10>
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s1_s2  for node: s1 and memory returned for this: 7
TASK_MANAGER_REQ_MESG curr_node: s1  dest:  s2  delay:  500000000.0 and expected message recv time:  2000500000000
dst, req_func:	 s2 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x149241ca0>
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s1_s2  for node: s1 and memory returned for this: 8
TASK_MANAGER_REQ_MESG curr_node: s1  dest:  s2  delay:  500000000.0 and expected message recv time:  2000500000000
dst, req_func:	 s2 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x149241d30>
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s1_s2  for node: s1 and memory returned for this: 9
TASK_MANAGER_REQ_MESG curr_node: s1  dest:  s2  delay:  500000000.0 and expected message recv time:  2000500000000
dst, req_func:	 s2 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x1484b6c10>
initiate_tasks running for node:  a
Trying to initiate task:  TaskEntGen_a_s1 and its already run flag is:  False
inside EG right task action:   TaskEntGen_a_s1
len(subtasks):	 5
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_a_s1  for node: a and memory returned for this: 0
TASK_MANAGER_REQ_MESG curr_node: a  dest:  s1  delay:  500000000.0 and expected message recv time:  2000500000000
dst, req_func:	 s1 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x149241040>
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_a_s1  for node: a and memory returned for this: 1
TASK_MANAGER_REQ_MESG curr_node: a  dest:  s1  delay:  500000000.0 and expected message recv time:  2000500000000
dst, req_func:	 s1 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x1492415e0>
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_a_s1  for node: a and memory returned for this: 2
TASK_MANAGER_REQ_MESG curr_node: a  dest:  s1  delay:  500000000.0 and expected message recv time:  2000500000000
dst, req_func:	 s1 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x149241700>
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_a_s1  for node: a and memory returned for this: 3
TASK_MANAGER_REQ_MESG curr_node: a  dest:  s1  delay:  500000000.0 and expected message recv time:  2000500000000
dst, req_func:	 s1 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x1492418b0>
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_a_s1  for node: a and memory returned for this: 4
TASK_MANAGER_REQ_MESG curr_node: a  dest:  s1  delay:  500000000.0 and expected message recv time:  2000500000000
dst, req_func:	 s1 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x1492419d0>
initiate_tasks running for node:  s2
Trying to initiate task:  TaskEntGen_s2_s1 and its already run flag is:  False
task name in action:  TaskEntGen_s2_s1
len(subtasks):	 5
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s2_s1  for node: s2 and memory returned for this: 0
dst, req_func:	 None None
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s2_s1  for node: s2 and memory returned for this: 1
dst, req_func:	 None None
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s2_s1  for node: s2 and memory returned for this: 2
dst, req_func:	 None None
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s2_s1  for node: s2 and memory returned for this: 3
dst, req_func:	 None None
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s2_s1  for node: s2 and memory returned for this: 4
dst, req_func:	 None None
Trying to initiate task:  TaskEntGen_s2_s3 and its already run flag is:  False
inside EG right task action:   TaskEntGen_s2_s3
len(subtasks):	 5
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s2_s3  for node: s2 and memory returned for this: 5
TASK_MANAGER_REQ_MESG curr_node: s2  dest:  s3  delay:  500000000.0 and expected message recv time:  2000500000000
dst, req_func:	 s3 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x149241ee0>
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s2_s3  for node: s2 and memory returned for this: 6
TASK_MANAGER_REQ_MESG curr_node: s2  dest:  s3  delay:  500000000.0 and expected message recv time:  2000500000000
dst, req_func:	 s3 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x149241f70>
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s2_s3  for node: s2 and memory returned for this: 7
TASK_MANAGER_REQ_MESG curr_node: s2  dest:  s3  delay:  500000000.0 and expected message recv time:  2000500000000
dst, req_func:	 s3 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x14d19b040>
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s2_s3  for node: s2 and memory returned for this: 8
TASK_MANAGER_REQ_MESG curr_node: s2  dest:  s3  delay:  500000000.0 and expected message recv time:  2000500000000
dst, req_func:	 s3 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x14d19b0d0>
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s2_s3  for node: s2 and memory returned for this: 9
TASK_MANAGER_REQ_MESG curr_node: s2  dest:  s3  delay:  500000000.0 and expected message recv time:  2000500000000
dst, req_func:	 s3 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x14d19b160>
initiate_tasks running for node:  s4
Trying to initiate task:  TaskEntGen_s4_s3 and its already run flag is:  False
task name in action:  TaskEntGen_s4_s3
len(subtasks):	 5
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s4_s3  for node: s4 and memory returned for this: 0
dst, req_func:	 None None
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s4_s3  for node: s4 and memory returned for this: 1
dst, req_func:	 None None
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s4_s3  for node: s4 and memory returned for this: 2
dst, req_func:	 None None
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s4_s3  for node: s4 and memory returned for this: 3
dst, req_func:	 None None
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s4_s3  for node: s4 and memory returned for this: 4
dst, req_func:	 None None
initiate_tasks running for node:  s3
Trying to initiate task:  TaskEntGen_s3_s2 and its already run flag is:  False
task name in action:  TaskEntGen_s3_s2
len(subtasks):	 5
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s3_s2  for node: s3 and memory returned for this: 0
dst, req_func:	 None None
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s3_s2  for node: s3 and memory returned for this: 1
dst, req_func:	 None None
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s3_s2  for node: s3 and memory returned for this: 2
dst, req_func:	 None None
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s3_s2  for node: s3 and memory returned for this: 3
dst, req_func:	 None None
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s3_s2  for node: s3 and memory returned for this: 4
dst, req_func:	 None None
Trying to initiate task:  TaskEntGen_s3_s4 and its already run flag is:  False
inside EG right task action:   TaskEntGen_s3_s4
len(subtasks):	 5
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s3_s4  for node: s3 and memory returned for this: 5
TASK_MANAGER_REQ_MESG curr_node: s3  dest:  s4  delay:  500000000.0 and expected message recv time:  2000500000000
dst, req_func:	 s4 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x14d19b3a0>
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s3_s4  for node: s3 and memory returned for this: 6
TASK_MANAGER_REQ_MESG curr_node: s3  dest:  s4  delay:  500000000.0 and expected message recv time:  2000500000000
dst, req_func:	 s4 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x14d19b430>
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s3_s4  for node: s3 and memory returned for this: 7
TASK_MANAGER_REQ_MESG curr_node: s3  dest:  s4  delay:  500000000.0 and expected message recv time:  2000500000000
dst, req_func:	 s4 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x14d19b4c0>
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s3_s4  for node: s3 and memory returned for this: 8
TASK_MANAGER_REQ_MESG curr_node: s3  dest:  s4  delay:  500000000.0 and expected message recv time:  2000500000000
dst, req_func:	 s4 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x14d19b550>
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s3_s4  for node: s3 and memory returned for this: 9
TASK_MANAGER_REQ_MESG curr_node: s3  dest:  s4  delay:  500000000.0 and expected message recv time:  2000500000000
dst, req_func:	 s4 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x14d19b5e0>
push message at  s2  msg.receiver:  ManagerType.ResourceManager
push message at  s2  msg.receiver:  ManagerType.ResourceManager
push message at  s2  msg.receiver:  ManagerType.ResourceManager
push message at  s2  msg.receiver:  ManagerType.ResourceManager
push message at  s2  msg.receiver:  ManagerType.ResourceManager
push message at  s1  msg.receiver:  ManagerType.ResourceManager
push message at  s1  msg.receiver:  ManagerType.ResourceManager
push message at  s1  msg.receiver:  ManagerType.ResourceManager
push message at  s1  msg.receiver:  ManagerType.ResourceManager
push message at  s1  msg.receiver:  ManagerType.ResourceManager
push message at  s3  msg.receiver:  ManagerType.ResourceManager
push message at  s3  msg.receiver:  ManagerType.ResourceManager
push message at  s3  msg.receiver:  ManagerType.ResourceManager
push message at  s3  msg.receiver:  ManagerType.ResourceManager
push message at  s3  msg.receiver:  ManagerType.ResourceManager
push message at  s4  msg.receiver:  ManagerType.ResourceManager
push message at  s4  msg.receiver:  ManagerType.ResourceManager
push message at  s4  msg.receiver:  ManagerType.ResourceManager
push message at  s4  msg.receiver:  ManagerType.ResourceManager
push message at  s4  msg.receiver:  ManagerType.ResourceManager
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s2.MemoryArray[0]
subtask failed:	 EGA.s2.MemoryArray[0]
initial dependencies for this subtask:	 ['EGA.s2.MemoryArray[0]']
task.name: TaskEntGen_s2_s1  for node: s2 and memory returned for this: 0
dst, req_func:	 None None
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s1.MemoryArray[5]
subtask failed:	 EGA.s1.MemoryArray[5]
initial dependencies for this subtask:	 ['EGA.s1.MemoryArray[5]']
task.name: TaskEntGen_s1_s2  for node: s1 and memory returned for this: 5
TASK_MANAGER_REQ_MESG curr_node: s1  dest:  s2  delay:  500000000.0 and expected message recv time:  2002800175000
dst, req_func:	 s2 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x14df37ca0>
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s4.MemoryArray[0]
subtask failed:	 EGA.s4.MemoryArray[0]
initial dependencies for this subtask:	 ['EGA.s4.MemoryArray[0]']
task.name: TaskEntGen_s4_s3  for node: s4 and memory returned for this: 0
dst, req_func:	 None None
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.a.MemoryArray[0]
TaskEntGen_a_s1  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyRightas1
added a subtask to dependency  and map status is:	 [('TaskEntGen_a_s1', ['EGA.a.MemoryArray[0]'])]
checking eligibility of:	 TaskPurifyRightas1
subtasks_available:	 ['EGA.a.MemoryArray[0]']
dependency_subtasks name:	 EGA.a.MemoryArray[0]
inside ent_purify_action2
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.a.MemoryArray[0]']
True
purification not needed
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.a.MemoryArray[0]
TaskPurifyRightas1  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapLeftEndas2
added a subtask to dependency  and map status is:	 [('TaskPurifyRightas1', ['EP_EGA.a.MemoryArray[0]'])]
checking eligibility of:	 TaskSwapLeftEndas2
subtasks_available:	 ['EP_EGA.a.MemoryArray[0]']
dependency_subtasks name:	 EP_EGA.a.MemoryArray[0]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.a.MemoryArray[0]']
True
task.name: TaskSwapLeftEndas2  for node: a and memory returned for this: 0
dst, req_func:	 None None
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s3.MemoryArray[5]
subtask failed:	 EGA.s3.MemoryArray[5]
initial dependencies for this subtask:	 ['EGA.s3.MemoryArray[5]']
task.name: TaskEntGen_s3_s4  for node: s3 and memory returned for this: 5
TASK_MANAGER_REQ_MESG curr_node: s3  dest:  s4  delay:  500000000.0 and expected message recv time:  2002800175010
dst, req_func:	 s4 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x14d19b670>
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s1.MemoryArray[0]
TaskEntGen_s1_a  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyLefts1a
added a subtask to dependency  and map status is:	 [('TaskEntGen_s1_a', ['EGA.s1.MemoryArray[0]'])]
checking eligibility of:	 TaskPurifyLefts1a
subtasks_available:	 ['EGA.s1.MemoryArray[0]']
dependency_subtasks name:	 EGA.s1.MemoryArray[0]
inside ent_purify_action1
ReservationProtocol_s1_R0
len(gen_subtask.dependents):  0
Not Making use of previously mapped purification subtask
newly created purification subtask for the gen subtask:  EGA.s1.MemoryArray[0]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s1.MemoryArray[0]']
True
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s1.MemoryArray[0]
TaskPurifyLefts1a  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapMiddles2a
added a subtask to dependency  and map status is:	 [('TaskPurifyRights1s2', []), ('TaskPurifyLefts1a', ['EP_EGA.s1.MemoryArray[0]'])]
checking eligibility of:	 TaskSwapMiddles2a
Not eligible yet because TaskPurifyRights1s2 does not have an instance to allocate
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s2.MemoryArray[5]
TaskEntGen_s2_s3  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyRights2s3
added a subtask to dependency  and map status is:	 [('TaskEntGen_s2_s3', ['EGA.s2.MemoryArray[5]'])]
checking eligibility of:	 TaskPurifyRights2s3
subtasks_available:	 ['EGA.s2.MemoryArray[5]']
dependency_subtasks name:	 EGA.s2.MemoryArray[5]
inside ent_purify_action2
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s2.MemoryArray[5]']
True
purification not needed
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s2.MemoryArray[5]
TaskPurifyRights2s3  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapLeftEnds2s4
added a subtask to dependency  and map status is:	 [('TaskPurifyRights2s3', ['EP_EGA.s2.MemoryArray[5]'])]
checking eligibility of:	 TaskSwapLeftEnds2s4
subtasks_available:	 ['EP_EGA.s2.MemoryArray[5]']
dependency_subtasks name:	 EP_EGA.s2.MemoryArray[5]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.s2.MemoryArray[5]']
True
task.name: TaskSwapLeftEnds2s4  for node: s2 and memory returned for this: 5
dst, req_func:	 None None
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s3.MemoryArray[0]
TaskEntGen_s3_s2  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyLefts3s2
added a subtask to dependency  and map status is:	 [('TaskEntGen_s3_s2', ['EGA.s3.MemoryArray[0]'])]
checking eligibility of:	 TaskPurifyLefts3s2
subtasks_available:	 ['EGA.s3.MemoryArray[0]']
dependency_subtasks name:	 EGA.s3.MemoryArray[0]
inside ent_purify_action1
ReservationProtocol_s3_R0
len(gen_subtask.dependents):  0
Not Making use of previously mapped purification subtask
newly created purification subtask for the gen subtask:  EGA.s3.MemoryArray[0]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s3.MemoryArray[0]']
True
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s3.MemoryArray[0]
TaskPurifyLefts3s2  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapMiddles4s2
added a subtask to dependency  and map status is:	 [('TaskPurifyRights3s4', []), ('TaskPurifyLefts3s2', ['EP_EGA.s3.MemoryArray[0]'])]
checking eligibility of:	 TaskSwapMiddles4s2
Not eligible yet because TaskPurifyRights3s4 does not have an instance to allocate
push message at  s2  msg.receiver:  ManagerType.ResourceManager
push message at  s4  msg.receiver:  ManagerType.ResourceManager
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s3.MemoryArray[1]
TaskEntGen_s3_s2  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyLefts3s2
added a subtask to dependency  and map status is:	 [('TaskEntGen_s3_s2', ['EGA.s3.MemoryArray[1]'])]
checking eligibility of:	 TaskPurifyLefts3s2
subtasks_available:	 ['EGA.s3.MemoryArray[1]']
dependency_subtasks name:	 EGA.s3.MemoryArray[1]
inside ent_purify_action1
ReservationProtocol_s3_R0
len(gen_subtask.dependents):  0
Not Making use of previously mapped purification subtask
newly created purification subtask for the gen subtask:  EGA.s3.MemoryArray[1]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s3.MemoryArray[1]']
True
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s3.MemoryArray[1]
TaskPurifyLefts3s2  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapMiddles4s2
added a subtask to dependency  and map status is:	 [('TaskPurifyRights3s4', []), ('TaskPurifyLefts3s2', ['EP_EGA.s3.MemoryArray[0]', 'EP_EGA.s3.MemoryArray[1]'])]
checking eligibility of:	 TaskSwapMiddles4s2
Not eligible yet because TaskPurifyRights3s4 does not have an instance to allocate
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s1.MemoryArray[6]
subtask failed:	 EGA.s1.MemoryArray[6]
initial dependencies for this subtask:	 ['EGA.s1.MemoryArray[6]']
task.name: TaskEntGen_s1_s2  for node: s1 and memory returned for this: 6
TASK_MANAGER_REQ_MESG curr_node: s1  dest:  s2  delay:  500000000.0 and expected message recv time:  2004400175010
dst, req_func:	 s2 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x14e5bf820>
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.a.MemoryArray[1]
TaskEntGen_a_s1  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyRightas1
added a subtask to dependency  and map status is:	 [('TaskEntGen_a_s1', ['EGA.a.MemoryArray[1]'])]
checking eligibility of:	 TaskPurifyRightas1
subtasks_available:	 ['EGA.a.MemoryArray[1]']
dependency_subtasks name:	 EGA.a.MemoryArray[1]
inside ent_purify_action2
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.a.MemoryArray[1]']
True
purification not needed
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.a.MemoryArray[1]
TaskPurifyRightas1  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapLeftEndas2
added a subtask to dependency  and map status is:	 [('TaskPurifyRightas1', ['EP_EGA.a.MemoryArray[1]'])]
checking eligibility of:	 TaskSwapLeftEndas2
subtasks_available:	 ['EP_EGA.a.MemoryArray[1]']
dependency_subtasks name:	 EP_EGA.a.MemoryArray[1]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.a.MemoryArray[1]']
True
task.name: TaskSwapLeftEndas2  for node: a and memory returned for this: 1
dst, req_func:	 None None
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s3.MemoryArray[6]
subtask failed:	 EGA.s3.MemoryArray[6]
initial dependencies for this subtask:	 ['EGA.s3.MemoryArray[6]']
task.name: TaskEntGen_s3_s4  for node: s3 and memory returned for this: 6
TASK_MANAGER_REQ_MESG curr_node: s3  dest:  s4  delay:  500000000.0 and expected message recv time:  2004400175010
dst, req_func:	 s4 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x14e5bfa60>
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s4.MemoryArray[1]
subtask failed:	 EGA.s4.MemoryArray[1]
initial dependencies for this subtask:	 ['EGA.s4.MemoryArray[1]']
task.name: TaskEntGen_s4_s3  for node: s4 and memory returned for this: 1
dst, req_func:	 None None
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s2.MemoryArray[6]
TaskEntGen_s2_s3  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyRights2s3
added a subtask to dependency  and map status is:	 [('TaskEntGen_s2_s3', ['EGA.s2.MemoryArray[6]'])]
checking eligibility of:	 TaskPurifyRights2s3
subtasks_available:	 ['EGA.s2.MemoryArray[6]']
dependency_subtasks name:	 EGA.s2.MemoryArray[6]
inside ent_purify_action2
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s2.MemoryArray[6]']
True
purification not needed
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s2.MemoryArray[6]
TaskPurifyRights2s3  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapLeftEnds2s4
added a subtask to dependency  and map status is:	 [('TaskPurifyRights2s3', ['EP_EGA.s2.MemoryArray[6]'])]
checking eligibility of:	 TaskSwapLeftEnds2s4
subtasks_available:	 ['EP_EGA.s2.MemoryArray[6]']
dependency_subtasks name:	 EP_EGA.s2.MemoryArray[6]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.s2.MemoryArray[6]']
True
task.name: TaskSwapLeftEnds2s4  for node: s2 and memory returned for this: 6
dst, req_func:	 None None
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s1.MemoryArray[1]
TaskEntGen_s1_a  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyLefts1a
added a subtask to dependency  and map status is:	 [('TaskEntGen_s1_a', ['EGA.s1.MemoryArray[1]'])]
checking eligibility of:	 TaskPurifyLefts1a
subtasks_available:	 ['EGA.s1.MemoryArray[1]']
dependency_subtasks name:	 EGA.s1.MemoryArray[1]
inside ent_purify_action1
ReservationProtocol_s1_R0
len(gen_subtask.dependents):  0
Not Making use of previously mapped purification subtask
newly created purification subtask for the gen subtask:  EGA.s1.MemoryArray[1]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s1.MemoryArray[1]']
True
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s1.MemoryArray[1]
TaskPurifyLefts1a  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapMiddles2a
added a subtask to dependency  and map status is:	 [('TaskPurifyRights1s2', []), ('TaskPurifyLefts1a', ['EP_EGA.s1.MemoryArray[0]', 'EP_EGA.s1.MemoryArray[1]'])]
checking eligibility of:	 TaskSwapMiddles2a
Not eligible yet because TaskPurifyRights1s2 does not have an instance to allocate
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s2.MemoryArray[1]
subtask failed:	 EGA.s2.MemoryArray[1]
initial dependencies for this subtask:	 ['EGA.s2.MemoryArray[1]']
task.name: TaskEntGen_s2_s1  for node: s2 and memory returned for this: 1
dst, req_func:	 None None
push message at  s2  msg.receiver:  ManagerType.ResourceManager
push message at  s4  msg.receiver:  ManagerType.ResourceManager
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s1.MemoryArray[2]
subtask failed:	 EGA.s1.MemoryArray[2]
initial dependencies for this subtask:	 ['EGA.s1.MemoryArray[2]']
task.name: TaskEntGen_s1_a  for node: s1 and memory returned for this: 2
dst, req_func:	 None None
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.a.MemoryArray[2]
subtask failed:	 EGA.a.MemoryArray[2]
initial dependencies for this subtask:	 ['EGA.a.MemoryArray[2]']
task.name: TaskEntGen_a_s1  for node: a and memory returned for this: 2
TASK_MANAGER_REQ_MESG curr_node: a  dest:  s1  delay:  500000000.0 and expected message recv time:  2006000175000
dst, req_func:	 s1 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x14e5bfe50>
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s2.MemoryArray[2]
subtask failed:	 EGA.s2.MemoryArray[2]
initial dependencies for this subtask:	 ['EGA.s2.MemoryArray[2]']
task.name: TaskEntGen_s2_s1  for node: s2 and memory returned for this: 2
dst, req_func:	 None None
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s3.MemoryArray[7]
subtask failed:	 EGA.s3.MemoryArray[7]
initial dependencies for this subtask:	 ['EGA.s3.MemoryArray[7]']
task.name: TaskEntGen_s3_s4  for node: s3 and memory returned for this: 7
TASK_MANAGER_REQ_MESG curr_node: s3  dest:  s4  delay:  500000000.0 and expected message recv time:  2006000175010
dst, req_func:	 s4 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x14e5bf8b0>
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s3.MemoryArray[2]
TaskEntGen_s3_s2  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyLefts3s2
added a subtask to dependency  and map status is:	 [('TaskEntGen_s3_s2', ['EGA.s3.MemoryArray[2]'])]
checking eligibility of:	 TaskPurifyLefts3s2
subtasks_available:	 ['EGA.s3.MemoryArray[2]']
dependency_subtasks name:	 EGA.s3.MemoryArray[2]
inside ent_purify_action1
ReservationProtocol_s3_R0
len(gen_subtask.dependents):  0
Not Making use of previously mapped purification subtask
newly created purification subtask for the gen subtask:  EGA.s3.MemoryArray[2]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s3.MemoryArray[2]']
True
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s3.MemoryArray[2]
TaskPurifyLefts3s2  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapMiddles4s2
added a subtask to dependency  and map status is:	 [('TaskPurifyRights3s4', []), ('TaskPurifyLefts3s2', ['EP_EGA.s3.MemoryArray[0]', 'EP_EGA.s3.MemoryArray[1]', 'EP_EGA.s3.MemoryArray[2]'])]
checking eligibility of:	 TaskSwapMiddles4s2
Not eligible yet because TaskPurifyRights3s4 does not have an instance to allocate
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s1.MemoryArray[7]
subtask failed:	 EGA.s1.MemoryArray[7]
initial dependencies for this subtask:	 ['EGA.s1.MemoryArray[7]']
task.name: TaskEntGen_s1_s2  for node: s1 and memory returned for this: 7
TASK_MANAGER_REQ_MESG curr_node: s1  dest:  s2  delay:  500000000.0 and expected message recv time:  2006000175010
dst, req_func:	 s2 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x14e5bfdc0>
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s2.MemoryArray[7]
TaskEntGen_s2_s3  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyRights2s3
added a subtask to dependency  and map status is:	 [('TaskEntGen_s2_s3', ['EGA.s2.MemoryArray[7]'])]
checking eligibility of:	 TaskPurifyRights2s3
subtasks_available:	 ['EGA.s2.MemoryArray[7]']
dependency_subtasks name:	 EGA.s2.MemoryArray[7]
inside ent_purify_action2
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s2.MemoryArray[7]']
True
purification not needed
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s2.MemoryArray[7]
TaskPurifyRights2s3  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapLeftEnds2s4
added a subtask to dependency  and map status is:	 [('TaskPurifyRights2s3', ['EP_EGA.s2.MemoryArray[7]'])]
checking eligibility of:	 TaskSwapLeftEnds2s4
subtasks_available:	 ['EP_EGA.s2.MemoryArray[7]']
dependency_subtasks name:	 EP_EGA.s2.MemoryArray[7]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.s2.MemoryArray[7]']
True
task.name: TaskSwapLeftEnds2s4  for node: s2 and memory returned for this: 7
dst, req_func:	 None None
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s4.MemoryArray[2]
subtask failed:	 EGA.s4.MemoryArray[2]
initial dependencies for this subtask:	 ['EGA.s4.MemoryArray[2]']
task.name: TaskEntGen_s4_s3  for node: s4 and memory returned for this: 2
dst, req_func:	 None None
push message at  s1  msg.receiver:  ManagerType.ResourceManager
push message at  s4  msg.receiver:  ManagerType.ResourceManager
push message at  s2  msg.receiver:  ManagerType.ResourceManager
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s1.MemoryArray[8]
TaskEntGen_s1_s2  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyRights1s2
added a subtask to dependency  and map status is:	 [('TaskEntGen_s1_s2', ['EGA.s1.MemoryArray[8]'])]
checking eligibility of:	 TaskPurifyRights1s2
subtasks_available:	 ['EGA.s1.MemoryArray[8]']
dependency_subtasks name:	 EGA.s1.MemoryArray[8]
inside ent_purify_action2
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s1.MemoryArray[8]']
True
purification not needed
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s1.MemoryArray[8]
TaskPurifyRights1s2  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapMiddles2a
added a subtask to dependency  and map status is:	 [('TaskPurifyRights1s2', ['EP_EGA.s1.MemoryArray[8]']), ('TaskPurifyLefts1a', ['EP_EGA.s1.MemoryArray[0]', 'EP_EGA.s1.MemoryArray[1]'])]
checking eligibility of:	 TaskSwapMiddles2a
subtasks_available:	 ['EP_EGA.s1.MemoryArray[8]', 'EP_EGA.s1.MemoryArray[0]']
dependency_subtasks name:	 EP_EGA.s1.MemoryArray[8]
dependency_subtasks name:	 EP_EGA.s1.MemoryArray[0]
inside task actin: left :a right: s4 and mid: s2 and self.own.name: s1
inside task actin: left_m :a right_m: s2 and mid: s2 and self.own.name: s1
inside ent_swap_action_middle
purify_subtask_left:  EP_EGA.s1.MemoryArray[8]
purify_subtask_right:  EP_EGA.s1.MemoryArray[0]
Created new swap subtask
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.s1.MemoryArray[8]', 'EP_EGA.s1.MemoryArray[0]']
True
Make use of newly created swap subtask :  ESA.s1.MemoryArray[0].s1.MemoryArray[8]
task.name: TaskSwapMiddles2a  for node: s1 and memory returned for this: 0
TASK_MANAGER_REQ_MESG curr_node: s1  dest:  a  delay:  500000000.0 and expected message recv time:  2007600175010
dst, req_func:	 a <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func1 at 0x14e5bff70>
TASK_MANAGER_REQ_MESG curr_node: s1  dest:  s2  delay:  500000000.0 and expected message recv time:  2007600175010
dst, req_func:	 s2 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func2 at 0x14ea5f040>
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s3.MemoryArray[3]
TaskEntGen_s3_s2  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyLefts3s2
added a subtask to dependency  and map status is:	 [('TaskEntGen_s3_s2', ['EGA.s3.MemoryArray[3]'])]
checking eligibility of:	 TaskPurifyLefts3s2
subtasks_available:	 ['EGA.s3.MemoryArray[3]']
dependency_subtasks name:	 EGA.s3.MemoryArray[3]
inside ent_purify_action1
ReservationProtocol_s3_R0
len(gen_subtask.dependents):  0
Not Making use of previously mapped purification subtask
newly created purification subtask for the gen subtask:  EGA.s3.MemoryArray[3]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s3.MemoryArray[3]']
True
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s3.MemoryArray[3]
TaskPurifyLefts3s2  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapMiddles4s2
added a subtask to dependency  and map status is:	 [('TaskPurifyRights3s4', []), ('TaskPurifyLefts3s2', ['EP_EGA.s3.MemoryArray[0]', 'EP_EGA.s3.MemoryArray[1]', 'EP_EGA.s3.MemoryArray[2]', 'EP_EGA.s3.MemoryArray[3]'])]
checking eligibility of:	 TaskSwapMiddles4s2
Not eligible yet because TaskPurifyRights3s4 does not have an instance to allocate
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s1.MemoryArray[3]
subtask failed:	 EGA.s1.MemoryArray[3]
initial dependencies for this subtask:	 ['EGA.s1.MemoryArray[3]']
task.name: TaskEntGen_s1_a  for node: s1 and memory returned for this: 3
dst, req_func:	 None None
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s2.MemoryArray[3]
TaskEntGen_s2_s1  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyLefts2s1
added a subtask to dependency  and map status is:	 [('TaskEntGen_s2_s1', ['EGA.s2.MemoryArray[3]'])]
checking eligibility of:	 TaskPurifyLefts2s1
subtasks_available:	 ['EGA.s2.MemoryArray[3]']
dependency_subtasks name:	 EGA.s2.MemoryArray[3]
inside ent_purify_action1
ReservationProtocol_s2_R0
len(gen_subtask.dependents):  0
Not Making use of previously mapped purification subtask
newly created purification subtask for the gen subtask:  EGA.s2.MemoryArray[3]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s2.MemoryArray[3]']
True
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s2.MemoryArray[3]
TaskPurifyLefts2s1  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapRightEnds2a
added a subtask to dependency  and map status is:	 [('TaskPurifyLefts2s1', ['EP_EGA.s2.MemoryArray[3]'])]
checking eligibility of:	 TaskSwapRightEnds2a
subtasks_available:	 ['EP_EGA.s2.MemoryArray[3]']
dependency_subtasks name:	 EP_EGA.s2.MemoryArray[3]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.s2.MemoryArray[3]']
True
task.name: TaskSwapRightEnds2a  for node: s2 and memory returned for this: 3
dst, req_func:	 None None
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s4.MemoryArray[3]
TaskEntGen_s4_s3  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyLefts4s3
added a subtask to dependency  and map status is:	 [('TaskEntGen_s4_s3', ['EGA.s4.MemoryArray[3]'])]
checking eligibility of:	 TaskPurifyLefts4s3
subtasks_available:	 ['EGA.s4.MemoryArray[3]']
dependency_subtasks name:	 EGA.s4.MemoryArray[3]
inside ent_purify_action1
ReservationProtocol_s4_R0
len(gen_subtask.dependents):  0
Not Making use of previously mapped purification subtask
newly created purification subtask for the gen subtask:  EGA.s4.MemoryArray[3]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s4.MemoryArray[3]']
True
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s4.MemoryArray[3]
TaskPurifyLefts4s3  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapRightEnds4s2
added a subtask to dependency  and map status is:	 [('TaskPurifyLefts4s3', ['EP_EGA.s4.MemoryArray[3]'])]
checking eligibility of:	 TaskSwapRightEnds4s2
subtasks_available:	 ['EP_EGA.s4.MemoryArray[3]']
dependency_subtasks name:	 EP_EGA.s4.MemoryArray[3]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.s4.MemoryArray[3]']
True
task.name: TaskSwapRightEnds4s2  for node: s4 and memory returned for this: 3
dst, req_func:	 None None
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s3.MemoryArray[8]
TaskEntGen_s3_s4  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyRights3s4
added a subtask to dependency  and map status is:	 [('TaskEntGen_s3_s4', ['EGA.s3.MemoryArray[8]'])]
checking eligibility of:	 TaskPurifyRights3s4
subtasks_available:	 ['EGA.s3.MemoryArray[8]']
dependency_subtasks name:	 EGA.s3.MemoryArray[8]
inside ent_purify_action2
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s3.MemoryArray[8]']
True
purification not needed
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s3.MemoryArray[8]
TaskPurifyRights3s4  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapMiddles4s2
added a subtask to dependency  and map status is:	 [('TaskPurifyRights3s4', ['EP_EGA.s3.MemoryArray[8]']), ('TaskPurifyLefts3s2', ['EP_EGA.s3.MemoryArray[0]', 'EP_EGA.s3.MemoryArray[1]', 'EP_EGA.s3.MemoryArray[2]', 'EP_EGA.s3.MemoryArray[3]'])]
checking eligibility of:	 TaskSwapMiddles4s2
subtasks_available:	 ['EP_EGA.s3.MemoryArray[8]', 'EP_EGA.s3.MemoryArray[0]']
dependency_subtasks name:	 EP_EGA.s3.MemoryArray[8]
dependency_subtasks name:	 EP_EGA.s3.MemoryArray[0]
inside task actin: left :a right: s4 and mid: s2 and self.own.name: s3
inside task actin: left_m :s2 right_m: s4 and mid: s2 and self.own.name: s3
inside ent_swap_action_middle
purify_subtask_left:  EP_EGA.s3.MemoryArray[8]
purify_subtask_right:  EP_EGA.s3.MemoryArray[0]
Created new swap subtask
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.s3.MemoryArray[8]', 'EP_EGA.s3.MemoryArray[0]']
True
Make use of newly created swap subtask :  ESA.s3.MemoryArray[0].s3.MemoryArray[8]
task.name: TaskSwapMiddles4s2  for node: s3 and memory returned for this: 0
TASK_MANAGER_REQ_MESG curr_node: s3  dest:  s2  delay:  500000000.0 and expected message recv time:  2007600175010
dst, req_func:	 s2 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func1 at 0x14ea5f430>
TASK_MANAGER_REQ_MESG curr_node: s3  dest:  s4  delay:  500000000.0 and expected message recv time:  2007600175010
dst, req_func:	 s4 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func2 at 0x14ea5f550>
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s2.MemoryArray[8]
TaskEntGen_s2_s3  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyRights2s3
added a subtask to dependency  and map status is:	 [('TaskEntGen_s2_s3', ['EGA.s2.MemoryArray[8]'])]
checking eligibility of:	 TaskPurifyRights2s3
subtasks_available:	 ['EGA.s2.MemoryArray[8]']
dependency_subtasks name:	 EGA.s2.MemoryArray[8]
inside ent_purify_action2
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s2.MemoryArray[8]']
True
purification not needed
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s2.MemoryArray[8]
TaskPurifyRights2s3  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapLeftEnds2s4
added a subtask to dependency  and map status is:	 [('TaskPurifyRights2s3', ['EP_EGA.s2.MemoryArray[8]'])]
checking eligibility of:	 TaskSwapLeftEnds2s4
subtasks_available:	 ['EP_EGA.s2.MemoryArray[8]']
dependency_subtasks name:	 EP_EGA.s2.MemoryArray[8]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.s2.MemoryArray[8]']
True
task.name: TaskSwapLeftEnds2s4  for node: s2 and memory returned for this: 8
dst, req_func:	 None None
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.a.MemoryArray[3]
subtask failed:	 EGA.a.MemoryArray[3]
initial dependencies for this subtask:	 ['EGA.a.MemoryArray[3]']
task.name: TaskEntGen_a_s1  for node: a and memory returned for this: 3
TASK_MANAGER_REQ_MESG curr_node: a  dest:  s1  delay:  500000000.0 and expected message recv time:  2007600175010
dst, req_func:	 s1 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x14ea5f790>
REQ_FUNC_RECV_TIME:  2007600175010  at node:  a
push message at  a  msg.receiver:  ManagerType.ResourceManager
push message at  s2  msg.receiver:  ManagerType.ResourceManager
push message at  s2  msg.receiver:  ManagerType.ResourceManager
push message at  s4  msg.receiver:  ManagerType.ResourceManager
push message at  s1  msg.receiver:  ManagerType.ResourceManager
Entanglement Swapping successful
########Subtask Succeeded############## subtask.protocol name ESA.s1.MemoryArray[0].s1.MemoryArray[8]
TaskSwapMiddles2a  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
Entanglement Swapping successful
########Subtask Succeeded############## subtask.protocol name ESA.s3.MemoryArray[0].s3.MemoryArray[8]
TaskSwapMiddles4s2  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
Entanglement swap successful between ('a', 's2.MemoryArray[3]')
########Subtask Succeeded############## subtask.protocol name ESB.a.MemoryArray[0]
TaskSwapLeftEndas2  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapLeftEndas4
added a subtask to dependency  and map status is:	 [('TaskSwapLeftEndas2', ['ESB.a.MemoryArray[0]'])]
checking eligibility of:	 TaskSwapLeftEndas4
subtasks_available:	 ['ESB.a.MemoryArray[0]']
dependency_subtasks name:	 ESB.a.MemoryArray[0]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['ESB.a.MemoryArray[0]']
True
task.name: TaskSwapLeftEndas4  for node: a and memory returned for this: 0
dst, req_func:	 None None
Entanglement swap successful between ('s2', 'a.MemoryArray[0]')
########Subtask Succeeded############## subtask.protocol name ESB.s2.MemoryArray[3]
TaskSwapRightEnds2a  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapMiddles4a
added a subtask to dependency  and map status is:	 [('TaskSwapLeftEnds2s4', []), ('TaskSwapRightEnds2a', ['ESB.s2.MemoryArray[3]'])]
checking eligibility of:	 TaskSwapMiddles4a
Not eligible yet because TaskSwapLeftEnds2s4 does not have an instance to allocate
Entanglement swap successful between ('s2', 's4.MemoryArray[3]')
########Subtask Succeeded############## subtask.protocol name ESB.s2.MemoryArray[5]
TaskSwapLeftEnds2s4  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapMiddles4a
added a subtask to dependency  and map status is:	 [('TaskSwapLeftEnds2s4', ['ESB.s2.MemoryArray[5]']), ('TaskSwapRightEnds2a', ['ESB.s2.MemoryArray[3]'])]
checking eligibility of:	 TaskSwapMiddles4a
subtasks_available:	 ['ESB.s2.MemoryArray[5]', 'ESB.s2.MemoryArray[3]']
dependency_subtasks name:	 ESB.s2.MemoryArray[5]
dependency_subtasks name:	 ESB.s2.MemoryArray[3]
inside task actin: left :a right: s4 and mid: s2 and self.own.name: s2
inside task actin: left_m :a right_m: s4 and mid: s2 and self.own.name: s2
inside ent_swap_action_middle
purify_subtask_left:  ESB.s2.MemoryArray[5]
purify_subtask_right:  ESB.s2.MemoryArray[3]
Created new swap subtask
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['ESB.s2.MemoryArray[5]', 'ESB.s2.MemoryArray[3]']
True
Make use of newly created swap subtask :  ESA.s2.MemoryArray[3].s2.MemoryArray[5]
task.name: TaskSwapMiddles4a  for node: s2 and memory returned for this: 3
TASK_MANAGER_REQ_MESG curr_node: s2  dest:  a  delay:  500000000.0 and expected message recv time:  2009100175010
dst, req_func:	 a <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func1 at 0x14ea5fdc0>
TASK_MANAGER_REQ_MESG curr_node: s2  dest:  s4  delay:  500000000.0 and expected message recv time:  2009100175010
dst, req_func:	 s4 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func2 at 0x14ea5fd30>
Entanglement swap successful between ('s4', 's2.MemoryArray[5]')
########Subtask Succeeded############## subtask.protocol name ESB.s4.MemoryArray[3]
TaskSwapRightEnds4s2  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapRightEnds4a
added a subtask to dependency  and map status is:	 [('TaskSwapRightEnds4s2', ['ESB.s4.MemoryArray[3]'])]
checking eligibility of:	 TaskSwapRightEnds4a
subtasks_available:	 ['ESB.s4.MemoryArray[3]']
dependency_subtasks name:	 ESB.s4.MemoryArray[3]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['ESB.s4.MemoryArray[3]']
True
task.name: TaskSwapRightEnds4a  for node: s4 and memory returned for this: 3
dst, req_func:	 None None
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s2.MemoryArray[4]
subtask failed:	 EGA.s2.MemoryArray[4]
initial dependencies for this subtask:	 ['EGA.s2.MemoryArray[4]']
task.name: TaskEntGen_s2_s1  for node: s2 and memory returned for this: 4
dst, req_func:	 None None
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s1.MemoryArray[9]
subtask failed:	 EGA.s1.MemoryArray[9]
initial dependencies for this subtask:	 ['EGA.s1.MemoryArray[9]']
task.name: TaskEntGen_s1_s2  for node: s1 and memory returned for this: 9
TASK_MANAGER_REQ_MESG curr_node: s1  dest:  s2  delay:  500000000.0 and expected message recv time:  2009200175000
dst, req_func:	 s2 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x14ea5fa60>
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s3.MemoryArray[9]
TaskEntGen_s3_s4  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyRights3s4
added a subtask to dependency  and map status is:	 [('TaskEntGen_s3_s4', ['EGA.s3.MemoryArray[9]'])]
checking eligibility of:	 TaskPurifyRights3s4
subtasks_available:	 ['EGA.s3.MemoryArray[9]']
dependency_subtasks name:	 EGA.s3.MemoryArray[9]
inside ent_purify_action2
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s3.MemoryArray[9]']
True
purification not needed
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s3.MemoryArray[9]
TaskPurifyRights3s4  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapMiddles4s2
added a subtask to dependency  and map status is:	 [('TaskPurifyRights3s4', ['EP_EGA.s3.MemoryArray[9]']), ('TaskPurifyLefts3s2', ['EP_EGA.s3.MemoryArray[1]', 'EP_EGA.s3.MemoryArray[2]', 'EP_EGA.s3.MemoryArray[3]'])]
checking eligibility of:	 TaskSwapMiddles4s2
subtasks_available:	 ['EP_EGA.s3.MemoryArray[9]', 'EP_EGA.s3.MemoryArray[1]']
dependency_subtasks name:	 EP_EGA.s3.MemoryArray[9]
dependency_subtasks name:	 EP_EGA.s3.MemoryArray[1]
inside task actin: left :a right: s4 and mid: s2 and self.own.name: s3
inside task actin: left_m :s2 right_m: s4 and mid: s2 and self.own.name: s3
inside ent_swap_action_middle
purify_subtask_left:  EP_EGA.s3.MemoryArray[9]
purify_subtask_right:  EP_EGA.s3.MemoryArray[1]
Created new swap subtask
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.s3.MemoryArray[9]', 'EP_EGA.s3.MemoryArray[1]']
True
Make use of newly created swap subtask :  ESA.s3.MemoryArray[1].s3.MemoryArray[9]
task.name: TaskSwapMiddles4s2  for node: s3 and memory returned for this: 1
TASK_MANAGER_REQ_MESG curr_node: s3  dest:  s2  delay:  500000000.0 and expected message recv time:  2009200175010
dst, req_func:	 s2 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func1 at 0x14ea5f9d0>
TASK_MANAGER_REQ_MESG curr_node: s3  dest:  s4  delay:  500000000.0 and expected message recv time:  2009200175010
dst, req_func:	 s4 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func2 at 0x14ea5fc10>
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s2.MemoryArray[9]
TaskEntGen_s2_s3  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyRights2s3
added a subtask to dependency  and map status is:	 [('TaskEntGen_s2_s3', ['EGA.s2.MemoryArray[9]'])]
checking eligibility of:	 TaskPurifyRights2s3
subtasks_available:	 ['EGA.s2.MemoryArray[9]']
dependency_subtasks name:	 EGA.s2.MemoryArray[9]
inside ent_purify_action2
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s2.MemoryArray[9]']
True
purification not needed
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s2.MemoryArray[9]
TaskPurifyRights2s3  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapLeftEnds2s4
added a subtask to dependency  and map status is:	 [('TaskPurifyRights2s3', ['EP_EGA.s2.MemoryArray[9]'])]
checking eligibility of:	 TaskSwapLeftEnds2s4
subtasks_available:	 ['EP_EGA.s2.MemoryArray[9]']
dependency_subtasks name:	 EP_EGA.s2.MemoryArray[9]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.s2.MemoryArray[9]']
True
task.name: TaskSwapLeftEnds2s4  for node: s2 and memory returned for this: 9
dst, req_func:	 None None
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s1.MemoryArray[4]
TaskEntGen_s1_a  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyLefts1a
added a subtask to dependency  and map status is:	 [('TaskEntGen_s1_a', ['EGA.s1.MemoryArray[4]'])]
checking eligibility of:	 TaskPurifyLefts1a
subtasks_available:	 ['EGA.s1.MemoryArray[4]']
dependency_subtasks name:	 EGA.s1.MemoryArray[4]
inside ent_purify_action1
ReservationProtocol_s1_R0
len(gen_subtask.dependents):  0
Not Making use of previously mapped purification subtask
newly created purification subtask for the gen subtask:  EGA.s1.MemoryArray[4]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s1.MemoryArray[4]']
True
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s1.MemoryArray[4]
TaskPurifyLefts1a  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapMiddles2a
added a subtask to dependency  and map status is:	 [('TaskPurifyRights1s2', []), ('TaskPurifyLefts1a', ['EP_EGA.s1.MemoryArray[1]', 'EP_EGA.s1.MemoryArray[4]'])]
checking eligibility of:	 TaskSwapMiddles2a
Not eligible yet because TaskPurifyRights1s2 does not have an instance to allocate
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s3.MemoryArray[4]
TaskEntGen_s3_s2  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyLefts3s2
added a subtask to dependency  and map status is:	 [('TaskEntGen_s3_s2', ['EGA.s3.MemoryArray[4]'])]
checking eligibility of:	 TaskPurifyLefts3s2
subtasks_available:	 ['EGA.s3.MemoryArray[4]']
dependency_subtasks name:	 EGA.s3.MemoryArray[4]
inside ent_purify_action1
ReservationProtocol_s3_R0
len(gen_subtask.dependents):  0
Not Making use of previously mapped purification subtask
newly created purification subtask for the gen subtask:  EGA.s3.MemoryArray[4]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s3.MemoryArray[4]']
True
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s3.MemoryArray[4]
TaskPurifyLefts3s2  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapMiddles4s2
added a subtask to dependency  and map status is:	 [('TaskPurifyRights3s4', []), ('TaskPurifyLefts3s2', ['EP_EGA.s3.MemoryArray[2]', 'EP_EGA.s3.MemoryArray[3]', 'EP_EGA.s3.MemoryArray[4]'])]
checking eligibility of:	 TaskSwapMiddles4s2
Not eligible yet because TaskPurifyRights3s4 does not have an instance to allocate
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.a.MemoryArray[4]
TaskEntGen_a_s1  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyRightas1
added a subtask to dependency  and map status is:	 [('TaskEntGen_a_s1', ['EGA.a.MemoryArray[4]'])]
checking eligibility of:	 TaskPurifyRightas1
subtasks_available:	 ['EGA.a.MemoryArray[4]']
dependency_subtasks name:	 EGA.a.MemoryArray[4]
inside ent_purify_action2
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.a.MemoryArray[4]']
True
purification not needed
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.a.MemoryArray[4]
TaskPurifyRightas1  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapLeftEndas2
added a subtask to dependency  and map status is:	 [('TaskPurifyRightas1', ['EP_EGA.a.MemoryArray[4]'])]
checking eligibility of:	 TaskSwapLeftEndas2
subtasks_available:	 ['EP_EGA.a.MemoryArray[4]']
dependency_subtasks name:	 EP_EGA.a.MemoryArray[4]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.a.MemoryArray[4]']
True
task.name: TaskSwapLeftEndas2  for node: a and memory returned for this: 4
dst, req_func:	 None None
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s4.MemoryArray[4]
TaskEntGen_s4_s3  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyLefts4s3
added a subtask to dependency  and map status is:	 [('TaskEntGen_s4_s3', ['EGA.s4.MemoryArray[4]'])]
checking eligibility of:	 TaskPurifyLefts4s3
subtasks_available:	 ['EGA.s4.MemoryArray[4]']
dependency_subtasks name:	 EGA.s4.MemoryArray[4]
inside ent_purify_action1
ReservationProtocol_s4_R0
len(gen_subtask.dependents):  0
Not Making use of previously mapped purification subtask
newly created purification subtask for the gen subtask:  EGA.s4.MemoryArray[4]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s4.MemoryArray[4]']
True
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s4.MemoryArray[4]
TaskPurifyLefts4s3  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapRightEnds4s2
added a subtask to dependency  and map status is:	 [('TaskPurifyLefts4s3', ['EP_EGA.s4.MemoryArray[4]'])]
checking eligibility of:	 TaskSwapRightEnds4s2
subtasks_available:	 ['EP_EGA.s4.MemoryArray[4]']
dependency_subtasks name:	 EP_EGA.s4.MemoryArray[4]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.s4.MemoryArray[4]']
True
task.name: TaskSwapRightEnds4s2  for node: s4 and memory returned for this: 4
dst, req_func:	 None None
REQ_FUNC_RECV_TIME:  2009100175010  at node:  a
push message at  a  msg.receiver:  ManagerType.ResourceManager
push message at  s4  msg.receiver:  ManagerType.ResourceManager
push message at  s2  msg.receiver:  ManagerType.ResourceManager
push message at  s2  msg.receiver:  ManagerType.ResourceManager
push message at  s4  msg.receiver:  ManagerType.ResourceManager
Entanglement Swapping successful
########Subtask Succeeded############## subtask.protocol name ESA.s2.MemoryArray[3].s2.MemoryArray[5]
TaskSwapMiddles4a  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
Entanglement Swapping successful
########Subtask Succeeded############## subtask.protocol name ESA.s3.MemoryArray[1].s3.MemoryArray[9]
TaskSwapMiddles4s2  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
Entanglement swap successful between ('a', 's4.MemoryArray[3]')
########Subtask Succeeded############## subtask.protocol name ESB.a.MemoryArray[0]
TaskSwapLeftEndas4  Task flag value:  True
responder:  s4
Virtual links at : a are : {'s4': [<qntsim.resource_management.task_manager.SubTask object at 0x14ea9ba00>]}
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
Entanglement swap successful between ('s4', 'a.MemoryArray[0]')
########Subtask Succeeded############## subtask.protocol name ESB.s4.MemoryArray[3]
TaskSwapRightEnds4a  Task flag value:  True
responder:  a
Virtual links at : s4 are : {'a': [<qntsim.resource_management.task_manager.SubTask object at 0x14ea8e850>]}
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
Entanglement swap successful between ('s2', 's4.MemoryArray[4]')
########Subtask Succeeded############## subtask.protocol name ESB.s2.MemoryArray[6]
TaskSwapLeftEnds2s4  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapMiddles4a
added a subtask to dependency  and map status is:	 [('TaskSwapLeftEnds2s4', ['ESB.s2.MemoryArray[6]']), ('TaskSwapRightEnds2a', [])]
checking eligibility of:	 TaskSwapMiddles4a
Not eligible yet because TaskSwapRightEnds2a does not have an instance to allocate
Entanglement swap successful between ('s4', 's2.MemoryArray[6]')
########Subtask Succeeded############## subtask.protocol name ESB.s4.MemoryArray[4]
TaskSwapRightEnds4s2  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapRightEnds4a
added a subtask to dependency  and map status is:	 [('TaskSwapRightEnds4s2', ['ESB.s4.MemoryArray[4]'])]
checking eligibility of:	 TaskSwapRightEnds4a
subtasks_available:	 ['ESB.s4.MemoryArray[4]']
dependency_subtasks name:	 ESB.s4.MemoryArray[4]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['ESB.s4.MemoryArray[4]']
True
task.name: TaskSwapRightEnds4a  for node: s4 and memory returned for this: 4
dst, req_func:	 None None
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s4.MemoryArray[0]
TaskEntGen_s4_s3  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyLefts4s3
added a subtask to dependency  and map status is:	 [('TaskEntGen_s4_s3', ['EGA.s4.MemoryArray[0]'])]
checking eligibility of:	 TaskPurifyLefts4s3
subtasks_available:	 ['EGA.s4.MemoryArray[0]']
dependency_subtasks name:	 EGA.s4.MemoryArray[0]
inside ent_purify_action1
ReservationProtocol_s4_R0
len(gen_subtask.dependents):  0
Not Making use of previously mapped purification subtask
newly created purification subtask for the gen subtask:  EGA.s4.MemoryArray[0]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s4.MemoryArray[0]']
True
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s4.MemoryArray[0]
TaskPurifyLefts4s3  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapRightEnds4s2
added a subtask to dependency  and map status is:	 [('TaskPurifyLefts4s3', ['EP_EGA.s4.MemoryArray[0]'])]
checking eligibility of:	 TaskSwapRightEnds4s2
subtasks_available:	 ['EP_EGA.s4.MemoryArray[0]']
dependency_subtasks name:	 EP_EGA.s4.MemoryArray[0]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.s4.MemoryArray[0]']
True
task.name: TaskSwapRightEnds4s2  for node: s4 and memory returned for this: 0
dst, req_func:	 None None
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s1.MemoryArray[2]
TaskEntGen_s1_a  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyLefts1a
added a subtask to dependency  and map status is:	 [('TaskEntGen_s1_a', ['EGA.s1.MemoryArray[2]'])]
checking eligibility of:	 TaskPurifyLefts1a
subtasks_available:	 ['EGA.s1.MemoryArray[2]']
dependency_subtasks name:	 EGA.s1.MemoryArray[2]
inside ent_purify_action1
ReservationProtocol_s1_R0
len(gen_subtask.dependents):  0
Not Making use of previously mapped purification subtask
newly created purification subtask for the gen subtask:  EGA.s1.MemoryArray[2]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s1.MemoryArray[2]']
True
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s1.MemoryArray[2]
TaskPurifyLefts1a  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapMiddles2a
added a subtask to dependency  and map status is:	 [('TaskPurifyRights1s2', []), ('TaskPurifyLefts1a', ['EP_EGA.s1.MemoryArray[1]', 'EP_EGA.s1.MemoryArray[4]', 'EP_EGA.s1.MemoryArray[2]'])]
checking eligibility of:	 TaskSwapMiddles2a
Not eligible yet because TaskPurifyRights1s2 does not have an instance to allocate
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s3.MemoryArray[5]
TaskEntGen_s3_s4  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyRights3s4
added a subtask to dependency  and map status is:	 [('TaskEntGen_s3_s4', ['EGA.s3.MemoryArray[5]'])]
checking eligibility of:	 TaskPurifyRights3s4
subtasks_available:	 ['EGA.s3.MemoryArray[5]']
dependency_subtasks name:	 EGA.s3.MemoryArray[5]
inside ent_purify_action2
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s3.MemoryArray[5]']
True
purification not needed
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s3.MemoryArray[5]
TaskPurifyRights3s4  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapMiddles4s2
added a subtask to dependency  and map status is:	 [('TaskPurifyRights3s4', ['EP_EGA.s3.MemoryArray[5]']), ('TaskPurifyLefts3s2', ['EP_EGA.s3.MemoryArray[2]', 'EP_EGA.s3.MemoryArray[3]', 'EP_EGA.s3.MemoryArray[4]'])]
checking eligibility of:	 TaskSwapMiddles4s2
subtasks_available:	 ['EP_EGA.s3.MemoryArray[5]', 'EP_EGA.s3.MemoryArray[2]']
dependency_subtasks name:	 EP_EGA.s3.MemoryArray[5]
dependency_subtasks name:	 EP_EGA.s3.MemoryArray[2]
inside task actin: left :a right: s4 and mid: s2 and self.own.name: s3
inside task actin: left_m :s2 right_m: s4 and mid: s2 and self.own.name: s3
inside ent_swap_action_middle
purify_subtask_left:  EP_EGA.s3.MemoryArray[5]
purify_subtask_right:  EP_EGA.s3.MemoryArray[2]
Created new swap subtask
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.s3.MemoryArray[5]', 'EP_EGA.s3.MemoryArray[2]']
True
Make use of newly created swap subtask :  ESA.s3.MemoryArray[2].s3.MemoryArray[5]
task.name: TaskSwapMiddles4s2  for node: s3 and memory returned for this: 2
TASK_MANAGER_REQ_MESG curr_node: s3  dest:  s2  delay:  500000000.0 and expected message recv time:  2010800175010
dst, req_func:	 s2 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func1 at 0x14eaa03a0>
TASK_MANAGER_REQ_MESG curr_node: s3  dest:  s4  delay:  500000000.0 and expected message recv time:  2010800175010
dst, req_func:	 s4 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func2 at 0x14eaa0790>
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s1.MemoryArray[5]
TaskEntGen_s1_s2  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyRights1s2
added a subtask to dependency  and map status is:	 [('TaskEntGen_s1_s2', ['EGA.s1.MemoryArray[5]'])]
checking eligibility of:	 TaskPurifyRights1s2
subtasks_available:	 ['EGA.s1.MemoryArray[5]']
dependency_subtasks name:	 EGA.s1.MemoryArray[5]
inside ent_purify_action2
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s1.MemoryArray[5]']
True
purification not needed
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s1.MemoryArray[5]
TaskPurifyRights1s2  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapMiddles2a
added a subtask to dependency  and map status is:	 [('TaskPurifyRights1s2', ['EP_EGA.s1.MemoryArray[5]']), ('TaskPurifyLefts1a', ['EP_EGA.s1.MemoryArray[1]', 'EP_EGA.s1.MemoryArray[4]', 'EP_EGA.s1.MemoryArray[2]'])]
checking eligibility of:	 TaskSwapMiddles2a
subtasks_available:	 ['EP_EGA.s1.MemoryArray[5]', 'EP_EGA.s1.MemoryArray[1]']
dependency_subtasks name:	 EP_EGA.s1.MemoryArray[5]
dependency_subtasks name:	 EP_EGA.s1.MemoryArray[1]
inside task actin: left :a right: s4 and mid: s2 and self.own.name: s1
inside task actin: left_m :a right_m: s2 and mid: s2 and self.own.name: s1
inside ent_swap_action_middle
purify_subtask_left:  EP_EGA.s1.MemoryArray[5]
purify_subtask_right:  EP_EGA.s1.MemoryArray[1]
Created new swap subtask
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.s1.MemoryArray[5]', 'EP_EGA.s1.MemoryArray[1]']
True
Make use of newly created swap subtask :  ESA.s1.MemoryArray[1].s1.MemoryArray[5]
task.name: TaskSwapMiddles2a  for node: s1 and memory returned for this: 1
TASK_MANAGER_REQ_MESG curr_node: s1  dest:  a  delay:  500000000.0 and expected message recv time:  2010800175010
dst, req_func:	 a <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func1 at 0x14eaa0310>
TASK_MANAGER_REQ_MESG curr_node: s1  dest:  s2  delay:  500000000.0 and expected message recv time:  2010800175010
dst, req_func:	 s2 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func2 at 0x14eaa08b0>
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.a.MemoryArray[2]
TaskEntGen_a_s1  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyRightas1
added a subtask to dependency  and map status is:	 [('TaskEntGen_a_s1', ['EGA.a.MemoryArray[2]'])]
checking eligibility of:	 TaskPurifyRightas1
subtasks_available:	 ['EGA.a.MemoryArray[2]']
dependency_subtasks name:	 EGA.a.MemoryArray[2]
inside ent_purify_action2
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.a.MemoryArray[2]']
True
purification not needed
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.a.MemoryArray[2]
TaskPurifyRightas1  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapLeftEndas2
added a subtask to dependency  and map status is:	 [('TaskPurifyRightas1', ['EP_EGA.a.MemoryArray[2]'])]
checking eligibility of:	 TaskSwapLeftEndas2
subtasks_available:	 ['EP_EGA.a.MemoryArray[2]']
dependency_subtasks name:	 EP_EGA.a.MemoryArray[2]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.a.MemoryArray[2]']
True
task.name: TaskSwapLeftEndas2  for node: a and memory returned for this: 2
dst, req_func:	 None None
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s2.MemoryArray[0]
TaskEntGen_s2_s1  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyLefts2s1
added a subtask to dependency  and map status is:	 [('TaskEntGen_s2_s1', ['EGA.s2.MemoryArray[0]'])]
checking eligibility of:	 TaskPurifyLefts2s1
subtasks_available:	 ['EGA.s2.MemoryArray[0]']
dependency_subtasks name:	 EGA.s2.MemoryArray[0]
inside ent_purify_action1
ReservationProtocol_s2_R0
len(gen_subtask.dependents):  0
Not Making use of previously mapped purification subtask
newly created purification subtask for the gen subtask:  EGA.s2.MemoryArray[0]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s2.MemoryArray[0]']
True
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s2.MemoryArray[0]
TaskPurifyLefts2s1  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapRightEnds2a
added a subtask to dependency  and map status is:	 [('TaskPurifyLefts2s1', ['EP_EGA.s2.MemoryArray[0]'])]
checking eligibility of:	 TaskSwapRightEnds2a
subtasks_available:	 ['EP_EGA.s2.MemoryArray[0]']
dependency_subtasks name:	 EP_EGA.s2.MemoryArray[0]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.s2.MemoryArray[0]']
True
task.name: TaskSwapRightEnds2a  for node: s2 and memory returned for this: 0
dst, req_func:	 None None
push message at  s2  msg.receiver:  ManagerType.ResourceManager
push message at  s4  msg.receiver:  ManagerType.ResourceManager
REQ_FUNC_RECV_TIME:  2010800175010  at node:  a
push message at  a  msg.receiver:  ManagerType.ResourceManager
push message at  s2  msg.receiver:  ManagerType.ResourceManager
Entanglement Swapping successful
########Subtask Succeeded############## subtask.protocol name ESA.s3.MemoryArray[2].s3.MemoryArray[5]
TaskSwapMiddles4s2  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
Entanglement Swapping successful
########Subtask Succeeded############## subtask.protocol name ESA.s1.MemoryArray[1].s1.MemoryArray[5]
TaskSwapMiddles2a  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
Entanglement swap successful between ('s2', 's4.MemoryArray[0]')
########Subtask Succeeded############## subtask.protocol name ESB.s2.MemoryArray[7]
TaskSwapLeftEnds2s4  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapMiddles4a
added a subtask to dependency  and map status is:	 [('TaskSwapLeftEnds2s4', ['ESB.s2.MemoryArray[6]', 'ESB.s2.MemoryArray[7]']), ('TaskSwapRightEnds2a', [])]
checking eligibility of:	 TaskSwapMiddles4a
Not eligible yet because TaskSwapRightEnds2a does not have an instance to allocate
Entanglement swap successful between ('s4', 's2.MemoryArray[7]')
########Subtask Succeeded############## subtask.protocol name ESB.s4.MemoryArray[0]
TaskSwapRightEnds4s2  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapRightEnds4a
added a subtask to dependency  and map status is:	 [('TaskSwapRightEnds4s2', ['ESB.s4.MemoryArray[0]'])]
checking eligibility of:	 TaskSwapRightEnds4a
subtasks_available:	 ['ESB.s4.MemoryArray[0]']
dependency_subtasks name:	 ESB.s4.MemoryArray[0]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['ESB.s4.MemoryArray[0]']
True
task.name: TaskSwapRightEnds4a  for node: s4 and memory returned for this: 0
dst, req_func:	 None None
Entanglement swap successful between ('a', 's2.MemoryArray[0]')
########Subtask Succeeded############## subtask.protocol name ESB.a.MemoryArray[1]
TaskSwapLeftEndas2  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapLeftEndas4
added a subtask to dependency  and map status is:	 [('TaskSwapLeftEndas2', ['ESB.a.MemoryArray[1]'])]
checking eligibility of:	 TaskSwapLeftEndas4
subtasks_available:	 ['ESB.a.MemoryArray[1]']
dependency_subtasks name:	 ESB.a.MemoryArray[1]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['ESB.a.MemoryArray[1]']
True
task.name: TaskSwapLeftEndas4  for node: a and memory returned for this: 1
dst, req_func:	 None None
Entanglement swap successful between ('s2', 'a.MemoryArray[1]')
########Subtask Succeeded############## subtask.protocol name ESB.s2.MemoryArray[0]
TaskSwapRightEnds2a  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapMiddles4a
added a subtask to dependency  and map status is:	 [('TaskSwapLeftEnds2s4', ['ESB.s2.MemoryArray[6]', 'ESB.s2.MemoryArray[7]']), ('TaskSwapRightEnds2a', ['ESB.s2.MemoryArray[0]'])]
checking eligibility of:	 TaskSwapMiddles4a
subtasks_available:	 ['ESB.s2.MemoryArray[6]', 'ESB.s2.MemoryArray[0]']
dependency_subtasks name:	 ESB.s2.MemoryArray[6]
dependency_subtasks name:	 ESB.s2.MemoryArray[0]
inside task actin: left :a right: s4 and mid: s2 and self.own.name: s2
inside task actin: left_m :a right_m: s4 and mid: s2 and self.own.name: s2
inside ent_swap_action_middle
purify_subtask_left:  ESB.s2.MemoryArray[6]
purify_subtask_right:  ESB.s2.MemoryArray[0]
Created new swap subtask
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['ESB.s2.MemoryArray[6]', 'ESB.s2.MemoryArray[0]']
True
Make use of newly created swap subtask :  ESA.s2.MemoryArray[0].s2.MemoryArray[6]
task.name: TaskSwapMiddles4a  for node: s2 and memory returned for this: 0
TASK_MANAGER_REQ_MESG curr_node: s2  dest:  a  delay:  500000000.0 and expected message recv time:  2012300175010
dst, req_func:	 a <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func1 at 0x14eaa0ee0>
TASK_MANAGER_REQ_MESG curr_node: s2  dest:  s4  delay:  500000000.0 and expected message recv time:  2012300175010
dst, req_func:	 s4 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func2 at 0x14eaa0dc0>
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s2.MemoryArray[1]
subtask failed:	 EGA.s2.MemoryArray[1]
initial dependencies for this subtask:	 ['EGA.s2.MemoryArray[1]']
task.name: TaskEntGen_s2_s1  for node: s2 and memory returned for this: 1
dst, req_func:	 None None
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s1.MemoryArray[6]
subtask failed:	 EGA.s1.MemoryArray[6]
initial dependencies for this subtask:	 ['EGA.s1.MemoryArray[6]']
task.name: TaskEntGen_s1_s2  for node: s1 and memory returned for this: 6
TASK_MANAGER_REQ_MESG curr_node: s1  dest:  s2  delay:  500000000.0 and expected message recv time:  2012400175000
dst, req_func:	 s2 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x14eaa0b80>
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s1.MemoryArray[3]
subtask failed:	 EGA.s1.MemoryArray[3]
initial dependencies for this subtask:	 ['EGA.s1.MemoryArray[3]']
task.name: TaskEntGen_s1_a  for node: s1 and memory returned for this: 3
dst, req_func:	 None None
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.a.MemoryArray[3]
subtask failed:	 EGA.a.MemoryArray[3]
initial dependencies for this subtask:	 ['EGA.a.MemoryArray[3]']
task.name: TaskEntGen_a_s1  for node: a and memory returned for this: 3
TASK_MANAGER_REQ_MESG curr_node: a  dest:  s1  delay:  500000000.0 and expected message recv time:  2012400175000
dst, req_func:	 s1 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x14eaf00d0>
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s3.MemoryArray[6]
TaskEntGen_s3_s4  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyRights3s4
added a subtask to dependency  and map status is:	 [('TaskEntGen_s3_s4', ['EGA.s3.MemoryArray[6]'])]
checking eligibility of:	 TaskPurifyRights3s4
subtasks_available:	 ['EGA.s3.MemoryArray[6]']
dependency_subtasks name:	 EGA.s3.MemoryArray[6]
inside ent_purify_action2
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s3.MemoryArray[6]']
True
purification not needed
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s3.MemoryArray[6]
TaskPurifyRights3s4  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapMiddles4s2
added a subtask to dependency  and map status is:	 [('TaskPurifyRights3s4', ['EP_EGA.s3.MemoryArray[6]']), ('TaskPurifyLefts3s2', ['EP_EGA.s3.MemoryArray[3]', 'EP_EGA.s3.MemoryArray[4]'])]
checking eligibility of:	 TaskSwapMiddles4s2
subtasks_available:	 ['EP_EGA.s3.MemoryArray[6]', 'EP_EGA.s3.MemoryArray[3]']
dependency_subtasks name:	 EP_EGA.s3.MemoryArray[6]
dependency_subtasks name:	 EP_EGA.s3.MemoryArray[3]
inside task actin: left :a right: s4 and mid: s2 and self.own.name: s3
inside task actin: left_m :s2 right_m: s4 and mid: s2 and self.own.name: s3
inside ent_swap_action_middle
purify_subtask_left:  EP_EGA.s3.MemoryArray[6]
purify_subtask_right:  EP_EGA.s3.MemoryArray[3]
Created new swap subtask
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.s3.MemoryArray[6]', 'EP_EGA.s3.MemoryArray[3]']
True
Make use of newly created swap subtask :  ESA.s3.MemoryArray[3].s3.MemoryArray[6]
task.name: TaskSwapMiddles4s2  for node: s3 and memory returned for this: 3
TASK_MANAGER_REQ_MESG curr_node: s3  dest:  s2  delay:  500000000.0 and expected message recv time:  2012400175010
dst, req_func:	 s2 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func1 at 0x14eaf0040>
TASK_MANAGER_REQ_MESG curr_node: s3  dest:  s4  delay:  500000000.0 and expected message recv time:  2012400175010
dst, req_func:	 s4 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func2 at 0x14eaf0160>
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s4.MemoryArray[1]
TaskEntGen_s4_s3  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyLefts4s3
added a subtask to dependency  and map status is:	 [('TaskEntGen_s4_s3', ['EGA.s4.MemoryArray[1]'])]
checking eligibility of:	 TaskPurifyLefts4s3
subtasks_available:	 ['EGA.s4.MemoryArray[1]']
dependency_subtasks name:	 EGA.s4.MemoryArray[1]
inside ent_purify_action1
ReservationProtocol_s4_R0
len(gen_subtask.dependents):  0
Not Making use of previously mapped purification subtask
newly created purification subtask for the gen subtask:  EGA.s4.MemoryArray[1]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s4.MemoryArray[1]']
True
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s4.MemoryArray[1]
TaskPurifyLefts4s3  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapRightEnds4s2
added a subtask to dependency  and map status is:	 [('TaskPurifyLefts4s3', ['EP_EGA.s4.MemoryArray[1]'])]
checking eligibility of:	 TaskSwapRightEnds4s2
subtasks_available:	 ['EP_EGA.s4.MemoryArray[1]']
dependency_subtasks name:	 EP_EGA.s4.MemoryArray[1]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.s4.MemoryArray[1]']
True
task.name: TaskSwapRightEnds4s2  for node: s4 and memory returned for this: 1
dst, req_func:	 None None
REQ_FUNC_RECV_TIME:  2012300175010  at node:  a
push message at  a  msg.receiver:  ManagerType.ResourceManager
push message at  s4  msg.receiver:  ManagerType.ResourceManager
push message at  s2  msg.receiver:  ManagerType.ResourceManager
push message at  s1  msg.receiver:  ManagerType.ResourceManager
push message at  s2  msg.receiver:  ManagerType.ResourceManager
push message at  s4  msg.receiver:  ManagerType.ResourceManager
Entanglement Swapping successful
########Subtask Succeeded############## subtask.protocol name ESA.s2.MemoryArray[0].s2.MemoryArray[6]
TaskSwapMiddles4a  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
Entanglement Swapping successful
########Subtask Succeeded############## subtask.protocol name ESA.s3.MemoryArray[3].s3.MemoryArray[6]
TaskSwapMiddles4s2  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
Entanglement swap successful between ('a', 's4.MemoryArray[4]')
########Subtask Succeeded############## subtask.protocol name ESB.a.MemoryArray[1]
TaskSwapLeftEndas4  Task flag value:  True
responder:  s4
Virtual links at : a are : {'s4': [<qntsim.resource_management.task_manager.SubTask object at 0x14ea9ba00>, <qntsim.resource_management.task_manager.SubTask object at 0x14eaec5e0>]}
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
Entanglement swap successful between ('s4', 'a.MemoryArray[1]')
########Subtask Succeeded############## subtask.protocol name ESB.s4.MemoryArray[4]
TaskSwapRightEnds4a  Task flag value:  True
responder:  a
Virtual links at : s4 are : {'a': [<qntsim.resource_management.task_manager.SubTask object at 0x14ea8e850>, <qntsim.resource_management.task_manager.SubTask object at 0x14eab0b20>]}
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
Entanglement swap successful between ('s2', 's4.MemoryArray[1]')
########Subtask Succeeded############## subtask.protocol name ESB.s2.MemoryArray[8]
TaskSwapLeftEnds2s4  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapMiddles4a
added a subtask to dependency  and map status is:	 [('TaskSwapLeftEnds2s4', ['ESB.s2.MemoryArray[7]', 'ESB.s2.MemoryArray[8]']), ('TaskSwapRightEnds2a', [])]
checking eligibility of:	 TaskSwapMiddles4a
Not eligible yet because TaskSwapRightEnds2a does not have an instance to allocate
Entanglement swap successful between ('s4', 's2.MemoryArray[8]')
########Subtask Succeeded############## subtask.protocol name ESB.s4.MemoryArray[1]
TaskSwapRightEnds4s2  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapRightEnds4a
added a subtask to dependency  and map status is:	 [('TaskSwapRightEnds4s2', ['ESB.s4.MemoryArray[1]'])]
checking eligibility of:	 TaskSwapRightEnds4a
subtasks_available:	 ['ESB.s4.MemoryArray[1]']
dependency_subtasks name:	 ESB.s4.MemoryArray[1]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['ESB.s4.MemoryArray[1]']
True
task.name: TaskSwapRightEnds4a  for node: s4 and memory returned for this: 1
dst, req_func:	 None None
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s1.MemoryArray[7]
TaskEntGen_s1_s2  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyRights1s2
added a subtask to dependency  and map status is:	 [('TaskEntGen_s1_s2', ['EGA.s1.MemoryArray[7]'])]
checking eligibility of:	 TaskPurifyRights1s2
subtasks_available:	 ['EGA.s1.MemoryArray[7]']
dependency_subtasks name:	 EGA.s1.MemoryArray[7]
inside ent_purify_action2
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s1.MemoryArray[7]']
True
purification not needed
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s1.MemoryArray[7]
TaskPurifyRights1s2  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapMiddles2a
added a subtask to dependency  and map status is:	 [('TaskPurifyRights1s2', ['EP_EGA.s1.MemoryArray[7]']), ('TaskPurifyLefts1a', ['EP_EGA.s1.MemoryArray[4]', 'EP_EGA.s1.MemoryArray[2]'])]
checking eligibility of:	 TaskSwapMiddles2a
subtasks_available:	 ['EP_EGA.s1.MemoryArray[7]', 'EP_EGA.s1.MemoryArray[4]']
dependency_subtasks name:	 EP_EGA.s1.MemoryArray[7]
dependency_subtasks name:	 EP_EGA.s1.MemoryArray[4]
inside task actin: left :a right: s4 and mid: s2 and self.own.name: s1
inside task actin: left_m :a right_m: s2 and mid: s2 and self.own.name: s1
inside ent_swap_action_middle
purify_subtask_left:  EP_EGA.s1.MemoryArray[7]
purify_subtask_right:  EP_EGA.s1.MemoryArray[4]
Created new swap subtask
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.s1.MemoryArray[7]', 'EP_EGA.s1.MemoryArray[4]']
True
Make use of newly created swap subtask :  ESA.s1.MemoryArray[4].s1.MemoryArray[7]
task.name: TaskSwapMiddles2a  for node: s1 and memory returned for this: 4
TASK_MANAGER_REQ_MESG curr_node: s1  dest:  a  delay:  500000000.0 and expected message recv time:  2014000175010
dst, req_func:	 a <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func1 at 0x14eaf0820>
TASK_MANAGER_REQ_MESG curr_node: s1  dest:  s2  delay:  500000000.0 and expected message recv time:  2014000175010
dst, req_func:	 s2 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func2 at 0x14eaf05e0>
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s4.MemoryArray[2]
subtask failed:	 EGA.s4.MemoryArray[2]
initial dependencies for this subtask:	 ['EGA.s4.MemoryArray[2]']
task.name: TaskEntGen_s4_s3  for node: s4 and memory returned for this: 2
dst, req_func:	 None None
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s3.MemoryArray[7]
subtask failed:	 EGA.s3.MemoryArray[7]
initial dependencies for this subtask:	 ['EGA.s3.MemoryArray[7]']
task.name: TaskEntGen_s3_s4  for node: s3 and memory returned for this: 7
TASK_MANAGER_REQ_MESG curr_node: s3  dest:  s4  delay:  500000000.0 and expected message recv time:  2014000175010
dst, req_func:	 s4 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x14eaf0430>
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s2.MemoryArray[2]
TaskEntGen_s2_s1  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyLefts2s1
added a subtask to dependency  and map status is:	 [('TaskEntGen_s2_s1', ['EGA.s2.MemoryArray[2]'])]
checking eligibility of:	 TaskPurifyLefts2s1
subtasks_available:	 ['EGA.s2.MemoryArray[2]']
dependency_subtasks name:	 EGA.s2.MemoryArray[2]
inside ent_purify_action1
ReservationProtocol_s2_R0
len(gen_subtask.dependents):  0
Not Making use of previously mapped purification subtask
newly created purification subtask for the gen subtask:  EGA.s2.MemoryArray[2]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s2.MemoryArray[2]']
True
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s2.MemoryArray[2]
TaskPurifyLefts2s1  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapRightEnds2a
added a subtask to dependency  and map status is:	 [('TaskPurifyLefts2s1', ['EP_EGA.s2.MemoryArray[2]'])]
checking eligibility of:	 TaskSwapRightEnds2a
subtasks_available:	 ['EP_EGA.s2.MemoryArray[2]']
dependency_subtasks name:	 EP_EGA.s2.MemoryArray[2]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.s2.MemoryArray[2]']
True
task.name: TaskSwapRightEnds2a  for node: s2 and memory returned for this: 2
dst, req_func:	 None None
REQ_FUNC_RECV_TIME:  2014000175010  at node:  a
push message at  a  msg.receiver:  ManagerType.ResourceManager
push message at  s2  msg.receiver:  ManagerType.ResourceManager
push message at  s4  msg.receiver:  ManagerType.ResourceManager
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s1.MemoryArray[3]
subtask failed:	 EGA.s1.MemoryArray[3]
initial dependencies for this subtask:	 ['EGA.s1.MemoryArray[3]']
task.name: TaskEntGen_s1_a  for node: s1 and memory returned for this: 3
dst, req_func:	 None None
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.a.MemoryArray[3]
subtask failed:	 EGA.a.MemoryArray[3]
initial dependencies for this subtask:	 ['EGA.a.MemoryArray[3]']
task.name: TaskEntGen_a_s1  for node: a and memory returned for this: 3
TASK_MANAGER_REQ_MESG curr_node: a  dest:  s1  delay:  500000000.0 and expected message recv time:  2014700350010
dst, req_func:	 s1 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x14eaf0b80>
Entanglement Swapping successful
########Subtask Succeeded############## subtask.protocol name ESA.s1.MemoryArray[4].s1.MemoryArray[7]
TaskSwapMiddles2a  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
push message at  s1  msg.receiver:  ManagerType.ResourceManager
Entanglement swap successful between ('a', 's2.MemoryArray[2]')
########Subtask Succeeded############## subtask.protocol name ESB.a.MemoryArray[4]
TaskSwapLeftEndas2  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapLeftEndas4
added a subtask to dependency  and map status is:	 [('TaskSwapLeftEndas2', ['ESB.a.MemoryArray[4]'])]
checking eligibility of:	 TaskSwapLeftEndas4
subtasks_available:	 ['ESB.a.MemoryArray[4]']
dependency_subtasks name:	 ESB.a.MemoryArray[4]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['ESB.a.MemoryArray[4]']
True
task.name: TaskSwapLeftEndas4  for node: a and memory returned for this: 4
dst, req_func:	 None None
Entanglement swap successful between ('s2', 'a.MemoryArray[4]')
########Subtask Succeeded############## subtask.protocol name ESB.s2.MemoryArray[2]
TaskSwapRightEnds2a  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapMiddles4a
added a subtask to dependency  and map status is:	 [('TaskSwapLeftEnds2s4', ['ESB.s2.MemoryArray[7]', 'ESB.s2.MemoryArray[8]']), ('TaskSwapRightEnds2a', ['ESB.s2.MemoryArray[2]'])]
checking eligibility of:	 TaskSwapMiddles4a
subtasks_available:	 ['ESB.s2.MemoryArray[7]', 'ESB.s2.MemoryArray[2]']
dependency_subtasks name:	 ESB.s2.MemoryArray[7]
dependency_subtasks name:	 ESB.s2.MemoryArray[2]
inside task actin: left :a right: s4 and mid: s2 and self.own.name: s2
inside task actin: left_m :a right_m: s4 and mid: s2 and self.own.name: s2
inside ent_swap_action_middle
purify_subtask_left:  ESB.s2.MemoryArray[7]
purify_subtask_right:  ESB.s2.MemoryArray[2]
Created new swap subtask
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['ESB.s2.MemoryArray[7]', 'ESB.s2.MemoryArray[2]']
True
Make use of newly created swap subtask :  ESA.s2.MemoryArray[2].s2.MemoryArray[7]
task.name: TaskSwapMiddles4a  for node: s2 and memory returned for this: 2
TASK_MANAGER_REQ_MESG curr_node: s2  dest:  a  delay:  500000000.0 and expected message recv time:  2015500175010
dst, req_func:	 a <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func1 at 0x14eaf09d0>
TASK_MANAGER_REQ_MESG curr_node: s2  dest:  s4  delay:  500000000.0 and expected message recv time:  2015500175010
dst, req_func:	 s4 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func2 at 0x14eaf0550>
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s1.MemoryArray[9]
subtask failed:	 EGA.s1.MemoryArray[9]
initial dependencies for this subtask:	 ['EGA.s1.MemoryArray[9]']
task.name: TaskEntGen_s1_s2  for node: s1 and memory returned for this: 9
TASK_MANAGER_REQ_MESG curr_node: s1  dest:  s2  delay:  500000000.0 and expected message recv time:  2015600175010
dst, req_func:	 s2 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x14eaf0c10>
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s2.MemoryArray[4]
subtask failed:	 EGA.s2.MemoryArray[4]
initial dependencies for this subtask:	 ['EGA.s2.MemoryArray[4]']
task.name: TaskEntGen_s2_s1  for node: s2 and memory returned for this: 4
dst, req_func:	 None None
REQ_FUNC_RECV_TIME:  2015500175010  at node:  a
push message at  a  msg.receiver:  ManagerType.ResourceManager
push message at  s4  msg.receiver:  ManagerType.ResourceManager
push message at  s2  msg.receiver:  ManagerType.ResourceManager
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s4.MemoryArray[2]
subtask failed:	 EGA.s4.MemoryArray[2]
initial dependencies for this subtask:	 ['EGA.s4.MemoryArray[2]']
task.name: TaskEntGen_s4_s3  for node: s4 and memory returned for this: 2
dst, req_func:	 None None
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s3.MemoryArray[7]
subtask failed:	 EGA.s3.MemoryArray[7]
initial dependencies for this subtask:	 ['EGA.s3.MemoryArray[7]']
task.name: TaskEntGen_s3_s4  for node: s3 and memory returned for this: 7
TASK_MANAGER_REQ_MESG curr_node: s3  dest:  s4  delay:  500000000.0 and expected message recv time:  2016300350020
dst, req_func:	 s4 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x14eaf0e50>
Entanglement Swapping successful
########Subtask Succeeded############## subtask.protocol name ESA.s2.MemoryArray[2].s2.MemoryArray[7]
TaskSwapMiddles4a  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
push message at  s4  msg.receiver:  ManagerType.ResourceManager
Entanglement swap successful between ('a', 's4.MemoryArray[0]')
########Subtask Succeeded############## subtask.protocol name ESB.a.MemoryArray[4]
TaskSwapLeftEndas4  Task flag value:  True
responder:  s4
Virtual links at : a are : {'s4': [<qntsim.resource_management.task_manager.SubTask object at 0x14ea9ba00>, <qntsim.resource_management.task_manager.SubTask object at 0x14eaec5e0>, <qntsim.resource_management.task_manager.SubTask object at 0x14eb1ea90>]}
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
Entanglement swap successful between ('s4', 'a.MemoryArray[4]')
########Subtask Succeeded############## subtask.protocol name ESB.s4.MemoryArray[0]
TaskSwapRightEnds4a  Task flag value:  True
responder:  a
Virtual links at : s4 are : {'a': [<qntsim.resource_management.task_manager.SubTask object at 0x14ea8e850>, <qntsim.resource_management.task_manager.SubTask object at 0x14eab0b20>, <qntsim.resource_management.task_manager.SubTask object at 0x14eaec610>]}
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s1.MemoryArray[3]
TaskEntGen_s1_a  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyLefts1a
added a subtask to dependency  and map status is:	 [('TaskEntGen_s1_a', ['EGA.s1.MemoryArray[3]'])]
checking eligibility of:	 TaskPurifyLefts1a
subtasks_available:	 ['EGA.s1.MemoryArray[3]']
dependency_subtasks name:	 EGA.s1.MemoryArray[3]
inside ent_purify_action1
ReservationProtocol_s1_R0
len(gen_subtask.dependents):  0
Not Making use of previously mapped purification subtask
newly created purification subtask for the gen subtask:  EGA.s1.MemoryArray[3]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s1.MemoryArray[3]']
True
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s1.MemoryArray[3]
TaskPurifyLefts1a  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapMiddles2a
added a subtask to dependency  and map status is:	 [('TaskPurifyRights1s2', []), ('TaskPurifyLefts1a', ['EP_EGA.s1.MemoryArray[2]', 'EP_EGA.s1.MemoryArray[3]'])]
checking eligibility of:	 TaskSwapMiddles2a
Not eligible yet because TaskPurifyRights1s2 does not have an instance to allocate
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.a.MemoryArray[3]
TaskEntGen_a_s1  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyRightas1
added a subtask to dependency  and map status is:	 [('TaskEntGen_a_s1', ['EGA.a.MemoryArray[3]'])]
checking eligibility of:	 TaskPurifyRightas1
subtasks_available:	 ['EGA.a.MemoryArray[3]']
dependency_subtasks name:	 EGA.a.MemoryArray[3]
inside ent_purify_action2
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.a.MemoryArray[3]']
True
purification not needed
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.a.MemoryArray[3]
TaskPurifyRightas1  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapLeftEndas2
added a subtask to dependency  and map status is:	 [('TaskPurifyRightas1', ['EP_EGA.a.MemoryArray[3]'])]
checking eligibility of:	 TaskSwapLeftEndas2
subtasks_available:	 ['EP_EGA.a.MemoryArray[3]']
dependency_subtasks name:	 EP_EGA.a.MemoryArray[3]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.a.MemoryArray[3]']
True
task.name: TaskSwapLeftEndas2  for node: a and memory returned for this: 3
dst, req_func:	 None None
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s2.MemoryArray[1]
subtask failed:	 EGA.s2.MemoryArray[1]
initial dependencies for this subtask:	 ['EGA.s2.MemoryArray[1]']
task.name: TaskEntGen_s2_s1  for node: s2 and memory returned for this: 1
dst, req_func:	 None None
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s1.MemoryArray[6]
subtask failed:	 EGA.s1.MemoryArray[6]
initial dependencies for this subtask:	 ['EGA.s1.MemoryArray[6]']
task.name: TaskEntGen_s1_s2  for node: s1 and memory returned for this: 6
TASK_MANAGER_REQ_MESG curr_node: s1  dest:  s2  delay:  500000000.0 and expected message recv time:  2017150175000
dst, req_func:	 s2 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x14eaf0ca0>
push message at  s2  msg.receiver:  ManagerType.ResourceManager
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s4.MemoryArray[2]
subtask failed:	 EGA.s4.MemoryArray[2]
initial dependencies for this subtask:	 ['EGA.s4.MemoryArray[2]']
task.name: TaskEntGen_s4_s3  for node: s4 and memory returned for this: 2
dst, req_func:	 None None
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s3.MemoryArray[7]
subtask failed:	 EGA.s3.MemoryArray[7]
initial dependencies for this subtask:	 ['EGA.s3.MemoryArray[7]']
task.name: TaskEntGen_s3_s4  for node: s3 and memory returned for this: 7
TASK_MANAGER_REQ_MESG curr_node: s3  dest:  s4  delay:  500000000.0 and expected message recv time:  2018600525030
dst, req_func:	 s4 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x14eaf0a60>
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s2.MemoryArray[4]
subtask failed:	 EGA.s2.MemoryArray[4]
initial dependencies for this subtask:	 ['EGA.s2.MemoryArray[4]']
task.name: TaskEntGen_s2_s1  for node: s2 and memory returned for this: 4
dst, req_func:	 None None
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s1.MemoryArray[9]
subtask failed:	 EGA.s1.MemoryArray[9]
initial dependencies for this subtask:	 ['EGA.s1.MemoryArray[9]']
task.name: TaskEntGen_s1_s2  for node: s1 and memory returned for this: 9
TASK_MANAGER_REQ_MESG curr_node: s1  dest:  s2  delay:  500000000.0 and expected message recv time:  2018750175000
dst, req_func:	 s2 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x14eaf0af0>
push message at  s4  msg.receiver:  ManagerType.ResourceManager
push message at  s2  msg.receiver:  ManagerType.ResourceManager
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s1.MemoryArray[6]
subtask failed:	 EGA.s1.MemoryArray[6]
initial dependencies for this subtask:	 ['EGA.s1.MemoryArray[6]']
task.name: TaskEntGen_s1_s2  for node: s1 and memory returned for this: 6
TASK_MANAGER_REQ_MESG curr_node: s1  dest:  s2  delay:  500000000.0 and expected message recv time:  2020400175010
dst, req_func:	 s2 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x14eaf0700>
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s2.MemoryArray[1]
subtask failed:	 EGA.s2.MemoryArray[1]
initial dependencies for this subtask:	 ['EGA.s2.MemoryArray[1]']
task.name: TaskEntGen_s2_s1  for node: s2 and memory returned for this: 1
dst, req_func:	 None None
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s4.MemoryArray[2]
subtask failed:	 EGA.s4.MemoryArray[2]
initial dependencies for this subtask:	 ['EGA.s4.MemoryArray[2]']
task.name: TaskEntGen_s4_s3  for node: s4 and memory returned for this: 2
dst, req_func:	 None None
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s3.MemoryArray[7]
subtask failed:	 EGA.s3.MemoryArray[7]
initial dependencies for this subtask:	 ['EGA.s3.MemoryArray[7]']
task.name: TaskEntGen_s3_s4  for node: s3 and memory returned for this: 7
TASK_MANAGER_REQ_MESG curr_node: s3  dest:  s4  delay:  500000000.0 and expected message recv time:  2020850700030
dst, req_func:	 s4 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x14eb7d310>
push message at  s2  msg.receiver:  ManagerType.ResourceManager
push message at  s4  msg.receiver:  ManagerType.ResourceManager
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s2.MemoryArray[4]
TaskEntGen_s2_s1  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyLefts2s1
added a subtask to dependency  and map status is:	 [('TaskEntGen_s2_s1', ['EGA.s2.MemoryArray[4]'])]
checking eligibility of:	 TaskPurifyLefts2s1
subtasks_available:	 ['EGA.s2.MemoryArray[4]']
dependency_subtasks name:	 EGA.s2.MemoryArray[4]
inside ent_purify_action1
ReservationProtocol_s2_R0
len(gen_subtask.dependents):  0
Not Making use of previously mapped purification subtask
newly created purification subtask for the gen subtask:  EGA.s2.MemoryArray[4]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s2.MemoryArray[4]']
True
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s2.MemoryArray[4]
TaskPurifyLefts2s1  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapRightEnds2a
added a subtask to dependency  and map status is:	 [('TaskPurifyLefts2s1', ['EP_EGA.s2.MemoryArray[4]'])]
checking eligibility of:	 TaskSwapRightEnds2a
subtasks_available:	 ['EP_EGA.s2.MemoryArray[4]']
dependency_subtasks name:	 EP_EGA.s2.MemoryArray[4]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.s2.MemoryArray[4]']
True
task.name: TaskSwapRightEnds2a  for node: s2 and memory returned for this: 4
dst, req_func:	 None None
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s1.MemoryArray[9]
TaskEntGen_s1_s2  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyRights1s2
added a subtask to dependency  and map status is:	 [('TaskEntGen_s1_s2', ['EGA.s1.MemoryArray[9]'])]
checking eligibility of:	 TaskPurifyRights1s2
subtasks_available:	 ['EGA.s1.MemoryArray[9]']
dependency_subtasks name:	 EGA.s1.MemoryArray[9]
inside ent_purify_action2
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s1.MemoryArray[9]']
True
purification not needed
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s1.MemoryArray[9]
TaskPurifyRights1s2  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapMiddles2a
added a subtask to dependency  and map status is:	 [('TaskPurifyRights1s2', ['EP_EGA.s1.MemoryArray[9]']), ('TaskPurifyLefts1a', ['EP_EGA.s1.MemoryArray[2]', 'EP_EGA.s1.MemoryArray[3]'])]
checking eligibility of:	 TaskSwapMiddles2a
subtasks_available:	 ['EP_EGA.s1.MemoryArray[9]', 'EP_EGA.s1.MemoryArray[2]']
dependency_subtasks name:	 EP_EGA.s1.MemoryArray[9]
dependency_subtasks name:	 EP_EGA.s1.MemoryArray[2]
inside task actin: left :a right: s4 and mid: s2 and self.own.name: s1
inside task actin: left_m :a right_m: s2 and mid: s2 and self.own.name: s1
inside ent_swap_action_middle
purify_subtask_left:  EP_EGA.s1.MemoryArray[9]
purify_subtask_right:  EP_EGA.s1.MemoryArray[2]
Created new swap subtask
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.s1.MemoryArray[9]', 'EP_EGA.s1.MemoryArray[2]']
True
Make use of newly created swap subtask :  ESA.s1.MemoryArray[2].s1.MemoryArray[9]
task.name: TaskSwapMiddles2a  for node: s1 and memory returned for this: 2
TASK_MANAGER_REQ_MESG curr_node: s1  dest:  a  delay:  500000000.0 and expected message recv time:  2022000175010
dst, req_func:	 a <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func1 at 0x14eb7d160>
TASK_MANAGER_REQ_MESG curr_node: s1  dest:  s2  delay:  500000000.0 and expected message recv time:  2022000175010
dst, req_func:	 s2 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func2 at 0x14eb7d0d0>
REQ_FUNC_RECV_TIME:  2022000175010  at node:  a
push message at  a  msg.receiver:  ManagerType.ResourceManager
push message at  s2  msg.receiver:  ManagerType.ResourceManager
Entanglement Swapping successful
########Subtask Succeeded############## subtask.protocol name ESA.s1.MemoryArray[2].s1.MemoryArray[9]
TaskSwapMiddles2a  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s4.MemoryArray[2]
subtask failed:	 EGA.s4.MemoryArray[2]
initial dependencies for this subtask:	 ['EGA.s4.MemoryArray[2]']
task.name: TaskEntGen_s4_s3  for node: s4 and memory returned for this: 2
dst, req_func:	 None None
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s3.MemoryArray[7]
subtask failed:	 EGA.s3.MemoryArray[7]
initial dependencies for this subtask:	 ['EGA.s3.MemoryArray[7]']
task.name: TaskEntGen_s3_s4  for node: s3 and memory returned for this: 7
TASK_MANAGER_REQ_MESG curr_node: s3  dest:  s4  delay:  500000000.0 and expected message recv time:  2023150875040
dst, req_func:	 s4 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x14eb7dc10>
Entanglement swap successful between ('a', 's2.MemoryArray[4]')
########Subtask Succeeded############## subtask.protocol name ESB.a.MemoryArray[2]
TaskSwapLeftEndas2  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapLeftEndas4
added a subtask to dependency  and map status is:	 [('TaskSwapLeftEndas2', ['ESB.a.MemoryArray[2]'])]
checking eligibility of:	 TaskSwapLeftEndas4
subtasks_available:	 ['ESB.a.MemoryArray[2]']
dependency_subtasks name:	 ESB.a.MemoryArray[2]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['ESB.a.MemoryArray[2]']
True
task.name: TaskSwapLeftEndas4  for node: a and memory returned for this: 2
dst, req_func:	 None None
Entanglement swap successful between ('s2', 'a.MemoryArray[2]')
########Subtask Succeeded############## subtask.protocol name ESB.s2.MemoryArray[4]
TaskSwapRightEnds2a  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapMiddles4a
added a subtask to dependency  and map status is:	 [('TaskSwapLeftEnds2s4', ['ESB.s2.MemoryArray[8]']), ('TaskSwapRightEnds2a', ['ESB.s2.MemoryArray[4]'])]
checking eligibility of:	 TaskSwapMiddles4a
subtasks_available:	 ['ESB.s2.MemoryArray[8]', 'ESB.s2.MemoryArray[4]']
dependency_subtasks name:	 ESB.s2.MemoryArray[8]
dependency_subtasks name:	 ESB.s2.MemoryArray[4]
inside task actin: left :a right: s4 and mid: s2 and self.own.name: s2
inside task actin: left_m :a right_m: s4 and mid: s2 and self.own.name: s2
inside ent_swap_action_middle
purify_subtask_left:  ESB.s2.MemoryArray[8]
purify_subtask_right:  ESB.s2.MemoryArray[4]
Created new swap subtask
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['ESB.s2.MemoryArray[8]', 'ESB.s2.MemoryArray[4]']
True
Make use of newly created swap subtask :  ESA.s2.MemoryArray[4].s2.MemoryArray[8]
task.name: TaskSwapMiddles4a  for node: s2 and memory returned for this: 4
TASK_MANAGER_REQ_MESG curr_node: s2  dest:  a  delay:  500000000.0 and expected message recv time:  2023500175010
dst, req_func:	 a <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func1 at 0x14eb7d5e0>
TASK_MANAGER_REQ_MESG curr_node: s2  dest:  s4  delay:  500000000.0 and expected message recv time:  2023500175010
dst, req_func:	 s4 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func2 at 0x14eb7d4c0>
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s1.MemoryArray[6]
TaskEntGen_s1_s2  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyRights1s2
added a subtask to dependency  and map status is:	 [('TaskEntGen_s1_s2', ['EGA.s1.MemoryArray[6]'])]
checking eligibility of:	 TaskPurifyRights1s2
subtasks_available:	 ['EGA.s1.MemoryArray[6]']
dependency_subtasks name:	 EGA.s1.MemoryArray[6]
inside ent_purify_action2
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s1.MemoryArray[6]']
True
purification not needed
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s1.MemoryArray[6]
TaskPurifyRights1s2  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapMiddles2a
added a subtask to dependency  and map status is:	 [('TaskPurifyRights1s2', ['EP_EGA.s1.MemoryArray[6]']), ('TaskPurifyLefts1a', ['EP_EGA.s1.MemoryArray[3]'])]
checking eligibility of:	 TaskSwapMiddles2a
subtasks_available:	 ['EP_EGA.s1.MemoryArray[6]', 'EP_EGA.s1.MemoryArray[3]']
dependency_subtasks name:	 EP_EGA.s1.MemoryArray[6]
dependency_subtasks name:	 EP_EGA.s1.MemoryArray[3]
inside task actin: left :a right: s4 and mid: s2 and self.own.name: s1
inside task actin: left_m :a right_m: s2 and mid: s2 and self.own.name: s1
inside ent_swap_action_middle
purify_subtask_left:  EP_EGA.s1.MemoryArray[6]
purify_subtask_right:  EP_EGA.s1.MemoryArray[3]
Created new swap subtask
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.s1.MemoryArray[6]', 'EP_EGA.s1.MemoryArray[3]']
True
Make use of newly created swap subtask :  ESA.s1.MemoryArray[3].s1.MemoryArray[6]
task.name: TaskSwapMiddles2a  for node: s1 and memory returned for this: 3
TASK_MANAGER_REQ_MESG curr_node: s1  dest:  a  delay:  500000000.0 and expected message recv time:  2023600175010
dst, req_func:	 a <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func1 at 0x14eb7d670>
TASK_MANAGER_REQ_MESG curr_node: s1  dest:  s2  delay:  500000000.0 and expected message recv time:  2023600175010
dst, req_func:	 s2 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func2 at 0x14eb7d790>
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s2.MemoryArray[1]
TaskEntGen_s2_s1  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyLefts2s1
added a subtask to dependency  and map status is:	 [('TaskEntGen_s2_s1', ['EGA.s2.MemoryArray[1]'])]
checking eligibility of:	 TaskPurifyLefts2s1
subtasks_available:	 ['EGA.s2.MemoryArray[1]']
dependency_subtasks name:	 EGA.s2.MemoryArray[1]
inside ent_purify_action1
ReservationProtocol_s2_R0
len(gen_subtask.dependents):  0
Not Making use of previously mapped purification subtask
newly created purification subtask for the gen subtask:  EGA.s2.MemoryArray[1]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s2.MemoryArray[1]']
True
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s2.MemoryArray[1]
TaskPurifyLefts2s1  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapRightEnds2a
added a subtask to dependency  and map status is:	 [('TaskPurifyLefts2s1', ['EP_EGA.s2.MemoryArray[1]'])]
checking eligibility of:	 TaskSwapRightEnds2a
subtasks_available:	 ['EP_EGA.s2.MemoryArray[1]']
dependency_subtasks name:	 EP_EGA.s2.MemoryArray[1]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.s2.MemoryArray[1]']
True
task.name: TaskSwapRightEnds2a  for node: s2 and memory returned for this: 1
dst, req_func:	 None None
push message at  s4  msg.receiver:  ManagerType.ResourceManager
REQ_FUNC_RECV_TIME:  2023500175010  at node:  a
push message at  a  msg.receiver:  ManagerType.ResourceManager
push message at  s4  msg.receiver:  ManagerType.ResourceManager
REQ_FUNC_RECV_TIME:  2023600175010  at node:  a
push message at  a  msg.receiver:  ManagerType.ResourceManager
push message at  s2  msg.receiver:  ManagerType.ResourceManager
Entanglement Swapping successful
########Subtask Succeeded############## subtask.protocol name ESA.s2.MemoryArray[4].s2.MemoryArray[8]
TaskSwapMiddles4a  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
Entanglement Swapping successful
########Subtask Succeeded############## subtask.protocol name ESA.s1.MemoryArray[3].s1.MemoryArray[6]
TaskSwapMiddles2a  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
Entanglement swap successful between ('a', 's4.MemoryArray[1]')
########Subtask Succeeded############## subtask.protocol name ESB.a.MemoryArray[2]
TaskSwapLeftEndas4  Task flag value:  True
responder:  s4
Virtual links at : a are : {'s4': [<qntsim.resource_management.task_manager.SubTask object at 0x14ea9ba00>, <qntsim.resource_management.task_manager.SubTask object at 0x14eaec5e0>, <qntsim.resource_management.task_manager.SubTask object at 0x14eb1ea90>, <qntsim.resource_management.task_manager.SubTask object at 0x14ebaea00>]}
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
Entanglement swap successful between ('s4', 'a.MemoryArray[2]')
########Subtask Succeeded############## subtask.protocol name ESB.s4.MemoryArray[1]
TaskSwapRightEnds4a  Task flag value:  True
responder:  a
Virtual links at : s4 are : {'a': [<qntsim.resource_management.task_manager.SubTask object at 0x14ea8e850>, <qntsim.resource_management.task_manager.SubTask object at 0x14eab0b20>, <qntsim.resource_management.task_manager.SubTask object at 0x14eaec610>, <qntsim.resource_management.task_manager.SubTask object at 0x14eb078e0>]}
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
Entanglement swap successful between ('a', 's2.MemoryArray[1]')
########Subtask Succeeded############## subtask.protocol name ESB.a.MemoryArray[3]
TaskSwapLeftEndas2  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapLeftEndas4
added a subtask to dependency  and map status is:	 [('TaskSwapLeftEndas2', ['ESB.a.MemoryArray[3]'])]
checking eligibility of:	 TaskSwapLeftEndas4
subtasks_available:	 ['ESB.a.MemoryArray[3]']
dependency_subtasks name:	 ESB.a.MemoryArray[3]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['ESB.a.MemoryArray[3]']
True
task.name: TaskSwapLeftEndas4  for node: a and memory returned for this: 3
dst, req_func:	 None None
Entanglement swap successful between ('s2', 'a.MemoryArray[3]')
########Subtask Succeeded############## subtask.protocol name ESB.s2.MemoryArray[1]
TaskSwapRightEnds2a  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapMiddles4a
added a subtask to dependency  and map status is:	 [('TaskSwapLeftEnds2s4', []), ('TaskSwapRightEnds2a', ['ESB.s2.MemoryArray[1]'])]
checking eligibility of:	 TaskSwapMiddles4a
Not eligible yet because TaskSwapLeftEnds2s4 does not have an instance to allocate
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s4.MemoryArray[2]
subtask failed:	 EGA.s4.MemoryArray[2]
initial dependencies for this subtask:	 ['EGA.s4.MemoryArray[2]']
task.name: TaskEntGen_s4_s3  for node: s4 and memory returned for this: 2
dst, req_func:	 None None
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s3.MemoryArray[7]
subtask failed:	 EGA.s3.MemoryArray[7]
initial dependencies for this subtask:	 ['EGA.s3.MemoryArray[7]']
task.name: TaskEntGen_s3_s4  for node: s3 and memory returned for this: 7
TASK_MANAGER_REQ_MESG curr_node: s3  dest:  s4  delay:  500000000.0 and expected message recv time:  2025451050050
dst, req_func:	 s4 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x14eb7d820>
push message at  s4  msg.receiver:  ManagerType.ResourceManager
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s3.MemoryArray[7]
TaskEntGen_s3_s4  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyRights3s4
added a subtask to dependency  and map status is:	 [('TaskEntGen_s3_s4', ['EGA.s3.MemoryArray[7]'])]
checking eligibility of:	 TaskPurifyRights3s4
subtasks_available:	 ['EGA.s3.MemoryArray[7]']
dependency_subtasks name:	 EGA.s3.MemoryArray[7]
inside ent_purify_action2
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s3.MemoryArray[7]']
True
purification not needed
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s3.MemoryArray[7]
TaskPurifyRights3s4  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapMiddles4s2
added a subtask to dependency  and map status is:	 [('TaskPurifyRights3s4', ['EP_EGA.s3.MemoryArray[7]']), ('TaskPurifyLefts3s2', ['EP_EGA.s3.MemoryArray[4]'])]
checking eligibility of:	 TaskSwapMiddles4s2
subtasks_available:	 ['EP_EGA.s3.MemoryArray[7]', 'EP_EGA.s3.MemoryArray[4]']
dependency_subtasks name:	 EP_EGA.s3.MemoryArray[7]
dependency_subtasks name:	 EP_EGA.s3.MemoryArray[4]
inside task actin: left :a right: s4 and mid: s2 and self.own.name: s3
inside task actin: left_m :s2 right_m: s4 and mid: s2 and self.own.name: s3
inside ent_swap_action_middle
purify_subtask_left:  EP_EGA.s3.MemoryArray[7]
purify_subtask_right:  EP_EGA.s3.MemoryArray[4]
Created new swap subtask
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.s3.MemoryArray[7]', 'EP_EGA.s3.MemoryArray[4]']
True
Make use of newly created swap subtask :  ESA.s3.MemoryArray[4].s3.MemoryArray[7]
task.name: TaskSwapMiddles4s2  for node: s3 and memory returned for this: 4
TASK_MANAGER_REQ_MESG curr_node: s3  dest:  s2  delay:  500000000.0 and expected message recv time:  2027751225060
dst, req_func:	 s2 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func1 at 0x14eb7daf0>
TASK_MANAGER_REQ_MESG curr_node: s3  dest:  s4  delay:  500000000.0 and expected message recv time:  2027751225060
dst, req_func:	 s4 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func2 at 0x14eb7d550>
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s4.MemoryArray[2]
TaskEntGen_s4_s3  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyLefts4s3
added a subtask to dependency  and map status is:	 [('TaskEntGen_s4_s3', ['EGA.s4.MemoryArray[2]'])]
checking eligibility of:	 TaskPurifyLefts4s3
subtasks_available:	 ['EGA.s4.MemoryArray[2]']
dependency_subtasks name:	 EGA.s4.MemoryArray[2]
inside ent_purify_action1
ReservationProtocol_s4_R0
len(gen_subtask.dependents):  0
Not Making use of previously mapped purification subtask
newly created purification subtask for the gen subtask:  EGA.s4.MemoryArray[2]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s4.MemoryArray[2]']
True
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s4.MemoryArray[2]
TaskPurifyLefts4s3  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapRightEnds4s2
added a subtask to dependency  and map status is:	 [('TaskPurifyLefts4s3', ['EP_EGA.s4.MemoryArray[2]'])]
checking eligibility of:	 TaskSwapRightEnds4s2
subtasks_available:	 ['EP_EGA.s4.MemoryArray[2]']
dependency_subtasks name:	 EP_EGA.s4.MemoryArray[2]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.s4.MemoryArray[2]']
True
task.name: TaskSwapRightEnds4s2  for node: s4 and memory returned for this: 2
dst, req_func:	 None None
push message at  s2  msg.receiver:  ManagerType.ResourceManager
push message at  s4  msg.receiver:  ManagerType.ResourceManager
Entanglement Swapping successful
########Subtask Succeeded############## subtask.protocol name ESA.s3.MemoryArray[4].s3.MemoryArray[7]
TaskSwapMiddles4s2  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
Entanglement swap successful between ('s2', 's4.MemoryArray[2]')
########Subtask Succeeded############## subtask.protocol name ESB.s2.MemoryArray[9]
TaskSwapLeftEnds2s4  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapMiddles4a
added a subtask to dependency  and map status is:	 [('TaskSwapLeftEnds2s4', ['ESB.s2.MemoryArray[9]']), ('TaskSwapRightEnds2a', ['ESB.s2.MemoryArray[1]'])]
checking eligibility of:	 TaskSwapMiddles4a
subtasks_available:	 ['ESB.s2.MemoryArray[9]', 'ESB.s2.MemoryArray[1]']
dependency_subtasks name:	 ESB.s2.MemoryArray[9]
dependency_subtasks name:	 ESB.s2.MemoryArray[1]
inside task actin: left :a right: s4 and mid: s2 and self.own.name: s2
inside task actin: left_m :a right_m: s4 and mid: s2 and self.own.name: s2
inside ent_swap_action_middle
purify_subtask_left:  ESB.s2.MemoryArray[9]
purify_subtask_right:  ESB.s2.MemoryArray[1]
Created new swap subtask
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['ESB.s2.MemoryArray[9]', 'ESB.s2.MemoryArray[1]']
True
Make use of newly created swap subtask :  ESA.s2.MemoryArray[1].s2.MemoryArray[9]
task.name: TaskSwapMiddles4a  for node: s2 and memory returned for this: 1
TASK_MANAGER_REQ_MESG curr_node: s2  dest:  a  delay:  500000000.0 and expected message recv time:  2029251225060
dst, req_func:	 a <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func1 at 0x14eb7de50>
TASK_MANAGER_REQ_MESG curr_node: s2  dest:  s4  delay:  500000000.0 and expected message recv time:  2029251225060
dst, req_func:	 s4 <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func2 at 0x14ebed040>
Entanglement swap successful between ('s4', 's2.MemoryArray[9]')
########Subtask Succeeded############## subtask.protocol name ESB.s4.MemoryArray[2]
TaskSwapRightEnds4s2  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapRightEnds4a
added a subtask to dependency  and map status is:	 [('TaskSwapRightEnds4s2', ['ESB.s4.MemoryArray[2]'])]
checking eligibility of:	 TaskSwapRightEnds4a
subtasks_available:	 ['ESB.s4.MemoryArray[2]']
dependency_subtasks name:	 ESB.s4.MemoryArray[2]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['ESB.s4.MemoryArray[2]']
True
task.name: TaskSwapRightEnds4a  for node: s4 and memory returned for this: 2
dst, req_func:	 None None
REQ_FUNC_RECV_TIME:  2029251225060  at node:  a
push message at  a  msg.receiver:  ManagerType.ResourceManager
push message at  s4  msg.receiver:  ManagerType.ResourceManager
Entanglement Swapping successful
########Subtask Succeeded############## subtask.protocol name ESA.s2.MemoryArray[1].s2.MemoryArray[9]
TaskSwapMiddles4a  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
Entanglement swap successful between ('a', 's4.MemoryArray[2]')
########Subtask Succeeded############## subtask.protocol name ESB.a.MemoryArray[3]
TaskSwapLeftEndas4  Task flag value:  True
responder:  s4
Virtual links at : a are : {'s4': [<qntsim.resource_management.task_manager.SubTask object at 0x14ea9ba00>, <qntsim.resource_management.task_manager.SubTask object at 0x14eaec5e0>, <qntsim.resource_management.task_manager.SubTask object at 0x14eb1ea90>, <qntsim.resource_management.task_manager.SubTask object at 0x14ebaea00>, <qntsim.resource_management.task_manager.SubTask object at 0x14eb5e580>]}
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
Entanglement swap successful between ('s4', 'a.MemoryArray[3]')
########Subtask Succeeded############## subtask.protocol name ESB.s4.MemoryArray[2]
TaskSwapRightEnds4a  Task flag value:  True
responder:  a
Virtual links at : s4 are : {'a': [<qntsim.resource_management.task_manager.SubTask object at 0x14ea8e850>, <qntsim.resource_management.task_manager.SubTask object at 0x14eab0b20>, <qntsim.resource_management.task_manager.SubTask object at 0x14eaec610>, <qntsim.resource_management.task_manager.SubTask object at 0x14eb078e0>, <qntsim.resource_management.task_manager.SubTask object at 0x14ebdd6d0>]}
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
a memories
+---------+---------------+------------------+------------+---------------------+---------------+-----------+
|   Index | Source node   | Entangled Node   |   Fidelity |   Entanglement Time |   Expire Time | State     |
+=========+===============+==================+============+=====================+===============+===========+
|       0 | a             | s4               |   0.655088 |             2.0101  |       2.0101  | ENTANGLED |
+---------+---------------+------------------+------------+---------------------+---------------+-----------+
|       1 | a             | s4               |   0.655088 |             2.0133  |       2.0133  | ENTANGLED |
+---------+---------------+------------------+------------+---------------------+---------------+-----------+
|       2 | a             | s4               |   0.655088 |             2.0245  |       2.0245  | ENTANGLED |
+---------+---------------+------------------+------------+---------------------+---------------+-----------+
|       3 | a             | s4               |   0.655088 |             2.03025 |       2.03025 | ENTANGLED |
+---------+---------------+------------------+------------+---------------------+---------------+-----------+
|       4 | a             | s4               |   0.655088 |             2.0165  |       2.0165  | ENTANGLED |
+---------+---------------+------------------+------------+---------------------+---------------+-----------+
b memories
+---------+---------------+------------------+------------+---------------------+---------------+---------+
| Index   | Source node   | Entangled Node   | Fidelity   | Entanglement Time   | Expire Time   | State   |
+=========+===============+==================+============+=====================+===============+=========+
+---------+---------------+------------------+------------+---------------------+---------------+---------+
s1 memories
+---------+---------------+------------------+------------+---------------------+---------------+---------+
| Index   | Source node   | Entangled Node   | Fidelity   | Entanglement Time   | Expire Time   | State   |
+=========+===============+==================+============+=====================+===============+=========+
+---------+---------------+------------------+------------+---------------------+---------------+---------+
s2 memories
+---------+---------------+------------------+------------+---------------------+---------------+---------+
| Index   | Source node   | Entangled Node   | Fidelity   | Entanglement Time   | Expire Time   | State   |
+=========+===============+==================+============+=====================+===============+=========+
+---------+---------------+------------------+------------+---------------------+---------------+---------+
s3 memories
+---------+---------------+------------------+------------+---------------------+---------------+---------+
| Index   | Source node   | Entangled Node   | Fidelity   | Entanglement Time   | Expire Time   | State   |
+=========+===============+==================+============+=====================+===============+=========+
+---------+---------------+------------------+------------+---------------------+---------------+---------+
s4 memories
+---------+---------------+------------------+------------+---------------------+---------------+-----------+
|   Index | Source node   | Entangled Node   |   Fidelity |   Entanglement Time |   Expire Time | State     |
+=========+===============+==================+============+=====================+===============+===========+
|       0 | s4            | a                |   0.655088 |             2.0165  |       2.0165  | ENTANGLED |
+---------+---------------+------------------+------------+---------------------+---------------+-----------+
|       1 | s4            | a                |   0.655088 |             2.0245  |       2.0245  | ENTANGLED |
+---------+---------------+------------------+------------+---------------------+---------------+-----------+
|       2 | s4            | a                |   0.655088 |             2.03025 |       2.03025 | ENTANGLED |
+---------+---------------+------------------+------------+---------------------+---------------+-----------+
|       3 | s4            | a                |   0.655088 |             2.0101  |       2.0101  | ENTANGLED |
+---------+---------------+------------------+------------+---------------------+---------------+-----------+
|       4 | s4            | a                |   0.655088 |             2.0133  |       2.0133  | ENTANGLED |
+---------+---------------+------------------+------------+---------------------+---------------+-----------+
setting dependencies
To maintain the virtual link indices
To maintain the virtual link indices
To maintain the virtual link indices
To maintain the virtual link indices
To maintain the virtual link indices
last_virtual_index -1
----------Enatanglement Generation Task----------
Current node in Entanglement generation b
Path-------- ['a', 's4', 'b']
Reservation------ a b 1
type(self.action) : <class 'NoneType'>
action:   None
depedencies for task:   TaskEntGen_b_s4   are   []
Initialized the dependencies_subtask_map
current status:	 {}
type(self.action) : <class 'function'>
action:   <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_purify_action at 0x14e52c1f0>
depedencies for task:   TaskPurifyLeftbs4   are   ['TaskEntGen_b_s4']
Initialized the dependencies_subtask_map
current status:	 {<qntsim.resource_management.task_manager.Task object at 0x15afc3040>: []}
Swap at node: s4 left: a and right: b
order of swaps:  [(('a', 'b', 's4'), 2)]
type(self.action) : <class 'function'>
action:   <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action at 0x14ebed0d0>
depedencies for task:   TaskSwapRightEndba   are   ['TaskPurifyLeftbs4']
Initialized the dependencies_subtask_map
current status:	 {<qntsim.resource_management.task_manager.Task object at 0x15afc3070>: []}
ENT_SWAP_RIGHT at:  b
tasks created at b
setting dependencies
To maintain the virtual link indices
To maintain the virtual link indices
To maintain the virtual link indices
To maintain the virtual link indices
To maintain the virtual link indices
To maintain the virtual link indices
To maintain the virtual link indices
To maintain the virtual link indices
To maintain the virtual link indices
To maintain the virtual link indices
last_virtual_index 4
----------Enatanglement Generation Task----------
Current node in Entanglement generation s4
Path-------- ['a', 's4', 'b']
Reservation------ a b 1
current node, mem_indices, available_memory_indices:  s4 [5, 6, 7, 8, 9] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
type(self.action) : <class 'NoneType'>
action:   None
depedencies for task:   TaskEntGen_s4_b   are   []
Initialized the dependencies_subtask_map
current status:	 {}
type(self.action) : <class 'function'>
action:   <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_purify_action at 0x14ebed3a0>
depedencies for task:   TaskPurifyRights4b   are   ['TaskEntGen_s4_b']
Initialized the dependencies_subtask_map
current status:	 {<qntsim.resource_management.task_manager.Task object at 0x15afc9d90>: []}
Swap at node: s4 left: a and right: b
order of swaps:  [(('a', 'b', 's4'), 2)]
while setting task action: left :a right: b and mid: s4 and self.own.name: s4
at mid of swap node:  s4 self.node.virtual_links:  {'a': [<qntsim.resource_management.task_manager.SubTask object at 0x14ea8e850>, <qntsim.resource_management.task_manager.SubTask object at 0x14eab0b20>, <qntsim.resource_management.task_manager.SubTask object at 0x14eaec610>, <qntsim.resource_management.task_manager.SubTask object at 0x14eb078e0>, <qntsim.resource_management.task_manager.SubTask object at 0x14ebdd6d0>]}
right task from VL: TaskPurifyRights4b
type(self.action) : <class 'function'>
action:   <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle at 0x14ebed160>
depedencies for task:   TaskSwapMiddleba   are   ['TaskPurifyRights4b', 'TaskSwapRightEnds4a']
Initialized the dependencies_subtask_map
current status:	 {<qntsim.resource_management.task_manager.Task object at 0x15afc9dc0>: [], <qntsim.resource_management.task_manager.Task object at 0x14922ea60>: []}
ENT_SWAP_MIDDLE at:  s4
last_left_task   :  TaskPurifyRights4b
last_right_task   :  TaskSwapRightEnds4a
Task name:	 TaskSwapMiddleba
added a subtask to dependency  and map status is:	 [('TaskPurifyRights4b', []), ('TaskSwapRightEnds4a', ['ESB.s4.MemoryArray[3]'])]
Task name:	 TaskSwapMiddleba
added a subtask to dependency  and map status is:	 [('TaskPurifyRights4b', []), ('TaskSwapRightEnds4a', ['ESB.s4.MemoryArray[3]', 'ESB.s4.MemoryArray[4]'])]
Task name:	 TaskSwapMiddleba
added a subtask to dependency  and map status is:	 [('TaskPurifyRights4b', []), ('TaskSwapRightEnds4a', ['ESB.s4.MemoryArray[3]', 'ESB.s4.MemoryArray[4]', 'ESB.s4.MemoryArray[0]'])]
Task name:	 TaskSwapMiddleba
added a subtask to dependency  and map status is:	 [('TaskPurifyRights4b', []), ('TaskSwapRightEnds4a', ['ESB.s4.MemoryArray[3]', 'ESB.s4.MemoryArray[4]', 'ESB.s4.MemoryArray[0]', 'ESB.s4.MemoryArray[1]'])]
Task name:	 TaskSwapMiddleba
added a subtask to dependency  and map status is:	 [('TaskPurifyRights4b', []), ('TaskSwapRightEnds4a', ['ESB.s4.MemoryArray[3]', 'ESB.s4.MemoryArray[4]', 'ESB.s4.MemoryArray[0]', 'ESB.s4.MemoryArray[1]', 'ESB.s4.MemoryArray[2]'])]
tasks created at  a
setting dependencies
To maintain the virtual link indices
To maintain the virtual link indices
To maintain the virtual link indices
To maintain the virtual link indices
To maintain the virtual link indices
last_virtual_index 4
----------Enatanglement Generation Task----------
Current node in Entanglement generation a
Path-------- ['a', 's4', 'b']
Reservation------ a b 1
Swap at node: s4 left: a and right: b
order of swaps:  [(('a', 'b', 's4'), 2)]
type(self.action) : <class 'function'>
action:   <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action at 0x14ebed4c0>
depedencies for task:   TaskSwapLeftEndab   are   ['TaskSwapLeftEndas4']
Initialized the dependencies_subtask_map
current status:	 {<qntsim.resource_management.task_manager.Task object at 0x14924fa60>: []}
ENT_SWAP_LEFT at:  a
Task name:	 TaskSwapLeftEndab
added a subtask to dependency  and map status is:	 [('TaskSwapLeftEndas4', ['ESB.a.MemoryArray[0]'])]
Task name:	 TaskSwapLeftEndab
added a subtask to dependency  and map status is:	 [('TaskSwapLeftEndas4', ['ESB.a.MemoryArray[0]', 'ESB.a.MemoryArray[1]'])]
Task name:	 TaskSwapLeftEndab
added a subtask to dependency  and map status is:	 [('TaskSwapLeftEndas4', ['ESB.a.MemoryArray[0]', 'ESB.a.MemoryArray[1]', 'ESB.a.MemoryArray[4]'])]
Task name:	 TaskSwapLeftEndab
added a subtask to dependency  and map status is:	 [('TaskSwapLeftEndas4', ['ESB.a.MemoryArray[0]', 'ESB.a.MemoryArray[1]', 'ESB.a.MemoryArray[4]', 'ESB.a.MemoryArray[2]'])]
Task name:	 TaskSwapLeftEndab
added a subtask to dependency  and map status is:	 [('TaskSwapLeftEndas4', ['ESB.a.MemoryArray[0]', 'ESB.a.MemoryArray[1]', 'ESB.a.MemoryArray[4]', 'ESB.a.MemoryArray[2]', 'ESB.a.MemoryArray[3]'])]
initiate_tasks running for node:  s4
Trying to initiate task:  TaskEntGen_s4_s3 and its already run flag is:  True
Trying to initiate task:  TaskEntGen_s4_b and its already run flag is:  False
inside EG right task action:   TaskEntGen_s4_b
len(subtasks):	 5
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s4_b  for node: s4 and memory returned for this: 5
TASK_MANAGER_REQ_MESG curr_node: s4  dest:  b  delay:  500000000.0 and expected message recv time:  5000500000000
dst, req_func:	 b <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x14ebed700>
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s4_b  for node: s4 and memory returned for this: 6
TASK_MANAGER_REQ_MESG curr_node: s4  dest:  b  delay:  500000000.0 and expected message recv time:  5000500000000
dst, req_func:	 b <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x14ebed790>
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s4_b  for node: s4 and memory returned for this: 7
TASK_MANAGER_REQ_MESG curr_node: s4  dest:  b  delay:  500000000.0 and expected message recv time:  5000500000000
dst, req_func:	 b <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x14ebed820>
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s4_b  for node: s4 and memory returned for this: 8
TASK_MANAGER_REQ_MESG curr_node: s4  dest:  b  delay:  500000000.0 and expected message recv time:  5000500000000
dst, req_func:	 b <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x14ebed8b0>
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_s4_b  for node: s4 and memory returned for this: 9
TASK_MANAGER_REQ_MESG curr_node: s4  dest:  b  delay:  500000000.0 and expected message recv time:  5000500000000
dst, req_func:	 b <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x14ebed940>
initiate_tasks running for node:  a
Trying to initiate task:  TaskEntGen_a_s1 and its already run flag is:  True
Trying to initiate task:  TaskSwapLeftEndab and its can_run_on_init flag is:  True
checking eligibility of:	 TaskSwapLeftEndab
subtasks_available:	 ['ESB.a.MemoryArray[0]']
dependency_subtasks name:	 ESB.a.MemoryArray[0]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['ESB.a.MemoryArray[0]']
True
task.name: TaskSwapLeftEndab  for node: a and memory returned for this: 0
dst, req_func:	 None None
checking eligibility of:	 TaskSwapLeftEndab
subtasks_available:	 ['ESB.a.MemoryArray[1]']
dependency_subtasks name:	 ESB.a.MemoryArray[1]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['ESB.a.MemoryArray[1]']
True
task.name: TaskSwapLeftEndab  for node: a and memory returned for this: 1
dst, req_func:	 None None
checking eligibility of:	 TaskSwapLeftEndab
subtasks_available:	 ['ESB.a.MemoryArray[4]']
dependency_subtasks name:	 ESB.a.MemoryArray[4]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['ESB.a.MemoryArray[4]']
True
task.name: TaskSwapLeftEndab  for node: a and memory returned for this: 4
dst, req_func:	 None None
checking eligibility of:	 TaskSwapLeftEndab
subtasks_available:	 ['ESB.a.MemoryArray[2]']
dependency_subtasks name:	 ESB.a.MemoryArray[2]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['ESB.a.MemoryArray[2]']
True
task.name: TaskSwapLeftEndab  for node: a and memory returned for this: 2
dst, req_func:	 None None
checking eligibility of:	 TaskSwapLeftEndab
subtasks_available:	 ['ESB.a.MemoryArray[3]']
dependency_subtasks name:	 ESB.a.MemoryArray[3]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['ESB.a.MemoryArray[3]']
True
task.name: TaskSwapLeftEndab  for node: a and memory returned for this: 3
dst, req_func:	 None None
checking eligibility of:	 TaskSwapLeftEndab
Not eligible yet because TaskSwapLeftEndas4 does not have an instance to allocate
initiate_tasks running for node:  b
Trying to initiate task:  TaskEntGen_b_s4 and its already run flag is:  False
task name in action:  TaskEntGen_b_s4
len(subtasks):	 5
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_b_s4  for node: b and memory returned for this: 0
dst, req_func:	 None None
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_b_s4  for node: b and memory returned for this: 1
dst, req_func:	 None None
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_b_s4  for node: b and memory returned for this: 2
dst, req_func:	 None None
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_b_s4  for node: b and memory returned for this: 3
dst, req_func:	 None None
subtask:	self.dependencies in is_eligible_to_run []
True
task.name: TaskEntGen_b_s4  for node: b and memory returned for this: 4
dst, req_func:	 None None
REQ_FUNC_RECV_TIME:  5000500000000  at node:  b
push message at  b  msg.receiver:  ManagerType.ResourceManager
REQ_FUNC_RECV_TIME:  5000500000000  at node:  b
push message at  b  msg.receiver:  ManagerType.ResourceManager
REQ_FUNC_RECV_TIME:  5000500000000  at node:  b
push message at  b  msg.receiver:  ManagerType.ResourceManager
REQ_FUNC_RECV_TIME:  5000500000000  at node:  b
push message at  b  msg.receiver:  ManagerType.ResourceManager
REQ_FUNC_RECV_TIME:  5000500000000  at node:  b
push message at  b  msg.receiver:  ManagerType.ResourceManager
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.b.MemoryArray[0]
subtask failed:	 EGA.b.MemoryArray[0]
initial dependencies for this subtask:	 ['EGA.b.MemoryArray[0]']
task.name: TaskEntGen_b_s4  for node: b and memory returned for this: 0
dst, req_func:	 None None
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s4.MemoryArray[5]
subtask failed:	 EGA.s4.MemoryArray[5]
initial dependencies for this subtask:	 ['EGA.s4.MemoryArray[5]']
task.name: TaskEntGen_s4_b  for node: s4 and memory returned for this: 5
TASK_MANAGER_REQ_MESG curr_node: s4  dest:  b  delay:  500000000.0 and expected message recv time:  5003300175010
dst, req_func:	 b <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x14ebedca0>
REQ_FUNC_RECV_TIME:  5003300175010  at node:  b
push message at  b  msg.receiver:  ManagerType.ResourceManager
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.b.MemoryArray[1]
TaskEntGen_b_s4  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyLeftbs4
added a subtask to dependency  and map status is:	 [('TaskEntGen_b_s4', ['EGA.b.MemoryArray[1]'])]
checking eligibility of:	 TaskPurifyLeftbs4
subtasks_available:	 ['EGA.b.MemoryArray[1]']
dependency_subtasks name:	 EGA.b.MemoryArray[1]
inside ent_purify_action1
ReservationProtocol_b_R1
len(gen_subtask.dependents):  0
Not Making use of previously mapped purification subtask
newly created purification subtask for the gen subtask:  EGA.b.MemoryArray[1]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.b.MemoryArray[1]']
True
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.b.MemoryArray[1]
TaskPurifyLeftbs4  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapRightEndba
added a subtask to dependency  and map status is:	 [('TaskPurifyLeftbs4', ['EP_EGA.b.MemoryArray[1]'])]
checking eligibility of:	 TaskSwapRightEndba
subtasks_available:	 ['EP_EGA.b.MemoryArray[1]']
dependency_subtasks name:	 EP_EGA.b.MemoryArray[1]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.b.MemoryArray[1]']
True
task.name: TaskSwapRightEndba  for node: b and memory returned for this: 1
dst, req_func:	 None None
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s4.MemoryArray[6]
TaskEntGen_s4_b  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyRights4b
added a subtask to dependency  and map status is:	 [('TaskEntGen_s4_b', ['EGA.s4.MemoryArray[6]'])]
checking eligibility of:	 TaskPurifyRights4b
subtasks_available:	 ['EGA.s4.MemoryArray[6]']
dependency_subtasks name:	 EGA.s4.MemoryArray[6]
inside ent_purify_action2
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s4.MemoryArray[6]']
True
purification not needed
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s4.MemoryArray[6]
TaskPurifyRights4b  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapMiddleba
added a subtask to dependency  and map status is:	 [('TaskPurifyRights4b', ['EP_EGA.s4.MemoryArray[6]']), ('TaskSwapRightEnds4a', ['ESB.s4.MemoryArray[3]', 'ESB.s4.MemoryArray[4]', 'ESB.s4.MemoryArray[0]', 'ESB.s4.MemoryArray[1]', 'ESB.s4.MemoryArray[2]'])]
checking eligibility of:	 TaskSwapMiddleba
subtasks_available:	 ['EP_EGA.s4.MemoryArray[6]', 'ESB.s4.MemoryArray[3]']
dependency_subtasks name:	 EP_EGA.s4.MemoryArray[6]
dependency_subtasks name:	 ESB.s4.MemoryArray[3]
inside task actin: left :a right: b and mid: s4 and self.own.name: s4
inside task actin: left_m :a right_m: b and mid: s4 and self.own.name: s4
inside ent_swap_action_middle
purify_subtask_left:  EP_EGA.s4.MemoryArray[6]
purify_subtask_right:  ESB.s4.MemoryArray[3]
Created new swap subtask
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.s4.MemoryArray[6]', 'ESB.s4.MemoryArray[3]']
True
Make use of newly created swap subtask :  ESA.s4.MemoryArray[3].s4.MemoryArray[6]
task.name: TaskSwapMiddleba  for node: s4 and memory returned for this: 3
TASK_MANAGER_REQ_MESG curr_node: s4  dest:  a  delay:  500000000.0 and expected message recv time:  5004900175010
dst, req_func:	 a <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func1 at 0x14ebedd30>
TASK_MANAGER_REQ_MESG curr_node: s4  dest:  b  delay:  500000000.0 and expected message recv time:  5004900175010
dst, req_func:	 b <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func2 at 0x14ebedee0>
REQ_FUNC_RECV_TIME:  5004900175010  at node:  a
push message at  a  msg.receiver:  ManagerType.ResourceManager
REQ_FUNC_RECV_TIME:  5004900175010  at node:  b
push message at  b  msg.receiver:  ManagerType.ResourceManager
Entanglement Swapping successful
########Subtask Succeeded############## subtask.protocol name ESA.s4.MemoryArray[3].s4.MemoryArray[6]
TaskSwapMiddleba  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
Entanglement swap successful between ('a', 'b.MemoryArray[1]')
########Subtask Succeeded############## subtask.protocol name ESB.a.MemoryArray[0]
TaskSwapLeftEndab  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
Entanglement swap successful between ('b', 'a.MemoryArray[0]')
########Subtask Succeeded############## subtask.protocol name ESB.b.MemoryArray[1]
TaskSwapRightEndba  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s4.MemoryArray[7]
TaskEntGen_s4_b  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyRights4b
added a subtask to dependency  and map status is:	 [('TaskEntGen_s4_b', ['EGA.s4.MemoryArray[7]'])]
checking eligibility of:	 TaskPurifyRights4b
subtasks_available:	 ['EGA.s4.MemoryArray[7]']
dependency_subtasks name:	 EGA.s4.MemoryArray[7]
inside ent_purify_action2
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s4.MemoryArray[7]']
True
purification not needed
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s4.MemoryArray[7]
TaskPurifyRights4b  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapMiddleba
added a subtask to dependency  and map status is:	 [('TaskPurifyRights4b', ['EP_EGA.s4.MemoryArray[7]']), ('TaskSwapRightEnds4a', ['ESB.s4.MemoryArray[4]', 'ESB.s4.MemoryArray[0]', 'ESB.s4.MemoryArray[1]', 'ESB.s4.MemoryArray[2]'])]
checking eligibility of:	 TaskSwapMiddleba
subtasks_available:	 ['EP_EGA.s4.MemoryArray[7]', 'ESB.s4.MemoryArray[4]']
dependency_subtasks name:	 EP_EGA.s4.MemoryArray[7]
dependency_subtasks name:	 ESB.s4.MemoryArray[4]
inside task actin: left :a right: b and mid: s4 and self.own.name: s4
inside task actin: left_m :a right_m: b and mid: s4 and self.own.name: s4
inside ent_swap_action_middle
purify_subtask_left:  EP_EGA.s4.MemoryArray[7]
purify_subtask_right:  ESB.s4.MemoryArray[4]
Created new swap subtask
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.s4.MemoryArray[7]', 'ESB.s4.MemoryArray[4]']
True
Make use of newly created swap subtask :  ESA.s4.MemoryArray[4].s4.MemoryArray[7]
task.name: TaskSwapMiddleba  for node: s4 and memory returned for this: 4
TASK_MANAGER_REQ_MESG curr_node: s4  dest:  a  delay:  500000000.0 and expected message recv time:  5006500175010
dst, req_func:	 a <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func1 at 0x15cfaf0d0>
TASK_MANAGER_REQ_MESG curr_node: s4  dest:  b  delay:  500000000.0 and expected message recv time:  5006500175010
dst, req_func:	 b <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func2 at 0x15cfaf160>
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.b.MemoryArray[2]
TaskEntGen_b_s4  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyLeftbs4
added a subtask to dependency  and map status is:	 [('TaskEntGen_b_s4', ['EGA.b.MemoryArray[2]'])]
checking eligibility of:	 TaskPurifyLeftbs4
subtasks_available:	 ['EGA.b.MemoryArray[2]']
dependency_subtasks name:	 EGA.b.MemoryArray[2]
inside ent_purify_action1
ReservationProtocol_b_R1
len(gen_subtask.dependents):  0
Not Making use of previously mapped purification subtask
newly created purification subtask for the gen subtask:  EGA.b.MemoryArray[2]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.b.MemoryArray[2]']
True
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.b.MemoryArray[2]
TaskPurifyLeftbs4  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapRightEndba
added a subtask to dependency  and map status is:	 [('TaskPurifyLeftbs4', ['EP_EGA.b.MemoryArray[2]'])]
checking eligibility of:	 TaskSwapRightEndba
subtasks_available:	 ['EP_EGA.b.MemoryArray[2]']
dependency_subtasks name:	 EP_EGA.b.MemoryArray[2]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.b.MemoryArray[2]']
True
task.name: TaskSwapRightEndba  for node: b and memory returned for this: 2
dst, req_func:	 None None
REQ_FUNC_RECV_TIME:  5006500175010  at node:  a
push message at  a  msg.receiver:  ManagerType.ResourceManager
REQ_FUNC_RECV_TIME:  5006500175010  at node:  b
push message at  b  msg.receiver:  ManagerType.ResourceManager
Entanglement Swapping successful
########Subtask Succeeded############## subtask.protocol name ESA.s4.MemoryArray[4].s4.MemoryArray[7]
TaskSwapMiddleba  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
Entanglement swap successful between ('a', 'b.MemoryArray[2]')
########Subtask Succeeded############## subtask.protocol name ESB.a.MemoryArray[1]
TaskSwapLeftEndab  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
Entanglement swap successful between ('b', 'a.MemoryArray[1]')
########Subtask Succeeded############## subtask.protocol name ESB.b.MemoryArray[2]
TaskSwapRightEndba  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s4.MemoryArray[8]
subtask failed:	 EGA.s4.MemoryArray[8]
initial dependencies for this subtask:	 ['EGA.s4.MemoryArray[8]']
task.name: TaskEntGen_s4_b  for node: s4 and memory returned for this: 8
TASK_MANAGER_REQ_MESG curr_node: s4  dest:  b  delay:  500000000.0 and expected message recv time:  5008100175010
dst, req_func:	 b <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x15cfaf430>
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.b.MemoryArray[3]
subtask failed:	 EGA.b.MemoryArray[3]
initial dependencies for this subtask:	 ['EGA.b.MemoryArray[3]']
task.name: TaskEntGen_b_s4  for node: b and memory returned for this: 3
dst, req_func:	 None None
REQ_FUNC_RECV_TIME:  5008100175010  at node:  b
push message at  b  msg.receiver:  ManagerType.ResourceManager
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.b.MemoryArray[4]
subtask failed:	 EGA.b.MemoryArray[4]
initial dependencies for this subtask:	 ['EGA.b.MemoryArray[4]']
task.name: TaskEntGen_b_s4  for node: b and memory returned for this: 4
dst, req_func:	 None None
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s4.MemoryArray[9]
subtask failed:	 EGA.s4.MemoryArray[9]
initial dependencies for this subtask:	 ['EGA.s4.MemoryArray[9]']
task.name: TaskEntGen_s4_b  for node: s4 and memory returned for this: 9
TASK_MANAGER_REQ_MESG curr_node: s4  dest:  b  delay:  500000000.0 and expected message recv time:  5009700175010
dst, req_func:	 b <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x15cfaf700>
REQ_FUNC_RECV_TIME:  5009700175010  at node:  b
push message at  b  msg.receiver:  ManagerType.ResourceManager
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s4.MemoryArray[5]
subtask failed:	 EGA.s4.MemoryArray[5]
initial dependencies for this subtask:	 ['EGA.s4.MemoryArray[5]']
task.name: TaskEntGen_s4_b  for node: s4 and memory returned for this: 5
TASK_MANAGER_REQ_MESG curr_node: s4  dest:  b  delay:  500000000.0 and expected message recv time:  5011300175000
dst, req_func:	 b <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x15cfaf550>
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.b.MemoryArray[0]
subtask failed:	 EGA.b.MemoryArray[0]
initial dependencies for this subtask:	 ['EGA.b.MemoryArray[0]']
task.name: TaskEntGen_b_s4  for node: b and memory returned for this: 0
dst, req_func:	 None None
REQ_FUNC_RECV_TIME:  5011300175000  at node:  b
push message at  b  msg.receiver:  ManagerType.ResourceManager
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.b.MemoryArray[3]
TaskEntGen_b_s4  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyLeftbs4
added a subtask to dependency  and map status is:	 [('TaskEntGen_b_s4', ['EGA.b.MemoryArray[3]'])]
checking eligibility of:	 TaskPurifyLeftbs4
subtasks_available:	 ['EGA.b.MemoryArray[3]']
dependency_subtasks name:	 EGA.b.MemoryArray[3]
inside ent_purify_action1
ReservationProtocol_b_R1
len(gen_subtask.dependents):  0
Not Making use of previously mapped purification subtask
newly created purification subtask for the gen subtask:  EGA.b.MemoryArray[3]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.b.MemoryArray[3]']
True
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.b.MemoryArray[3]
TaskPurifyLeftbs4  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapRightEndba
added a subtask to dependency  and map status is:	 [('TaskPurifyLeftbs4', ['EP_EGA.b.MemoryArray[3]'])]
checking eligibility of:	 TaskSwapRightEndba
subtasks_available:	 ['EP_EGA.b.MemoryArray[3]']
dependency_subtasks name:	 EP_EGA.b.MemoryArray[3]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.b.MemoryArray[3]']
True
task.name: TaskSwapRightEndba  for node: b and memory returned for this: 3
dst, req_func:	 None None
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s4.MemoryArray[8]
TaskEntGen_s4_b  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyRights4b
added a subtask to dependency  and map status is:	 [('TaskEntGen_s4_b', ['EGA.s4.MemoryArray[8]'])]
checking eligibility of:	 TaskPurifyRights4b
subtasks_available:	 ['EGA.s4.MemoryArray[8]']
dependency_subtasks name:	 EGA.s4.MemoryArray[8]
inside ent_purify_action2
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s4.MemoryArray[8]']
True
purification not needed
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s4.MemoryArray[8]
TaskPurifyRights4b  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapMiddleba
added a subtask to dependency  and map status is:	 [('TaskPurifyRights4b', ['EP_EGA.s4.MemoryArray[8]']), ('TaskSwapRightEnds4a', ['ESB.s4.MemoryArray[0]', 'ESB.s4.MemoryArray[1]', 'ESB.s4.MemoryArray[2]'])]
checking eligibility of:	 TaskSwapMiddleba
subtasks_available:	 ['EP_EGA.s4.MemoryArray[8]', 'ESB.s4.MemoryArray[0]']
dependency_subtasks name:	 EP_EGA.s4.MemoryArray[8]
dependency_subtasks name:	 ESB.s4.MemoryArray[0]
inside task actin: left :a right: b and mid: s4 and self.own.name: s4
inside task actin: left_m :a right_m: b and mid: s4 and self.own.name: s4
inside ent_swap_action_middle
purify_subtask_left:  EP_EGA.s4.MemoryArray[8]
purify_subtask_right:  ESB.s4.MemoryArray[0]
Created new swap subtask
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.s4.MemoryArray[8]', 'ESB.s4.MemoryArray[0]']
True
Make use of newly created swap subtask :  ESA.s4.MemoryArray[0].s4.MemoryArray[8]
task.name: TaskSwapMiddleba  for node: s4 and memory returned for this: 0
TASK_MANAGER_REQ_MESG curr_node: s4  dest:  a  delay:  500000000.0 and expected message recv time:  5012900175010
dst, req_func:	 a <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func1 at 0x15cfaf3a0>
TASK_MANAGER_REQ_MESG curr_node: s4  dest:  b  delay:  500000000.0 and expected message recv time:  5012900175010
dst, req_func:	 b <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func2 at 0x15cfaf790>
REQ_FUNC_RECV_TIME:  5012900175010  at node:  a
push message at  a  msg.receiver:  ManagerType.ResourceManager
REQ_FUNC_RECV_TIME:  5012900175010  at node:  b
push message at  b  msg.receiver:  ManagerType.ResourceManager
Entanglement Swapping successful
########Subtask Succeeded############## subtask.protocol name ESA.s4.MemoryArray[0].s4.MemoryArray[8]
TaskSwapMiddleba  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
Entanglement swap successful between ('a', 'b.MemoryArray[3]')
########Subtask Succeeded############## subtask.protocol name ESB.a.MemoryArray[4]
TaskSwapLeftEndab  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
Entanglement swap successful between ('b', 'a.MemoryArray[4]')
########Subtask Succeeded############## subtask.protocol name ESB.b.MemoryArray[3]
TaskSwapRightEndba  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s4.MemoryArray[9]
subtask failed:	 EGA.s4.MemoryArray[9]
initial dependencies for this subtask:	 ['EGA.s4.MemoryArray[9]']
task.name: TaskEntGen_s4_b  for node: s4 and memory returned for this: 9
TASK_MANAGER_REQ_MESG curr_node: s4  dest:  b  delay:  500000000.0 and expected message recv time:  5014500175010
dst, req_func:	 b <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x15cfaf940>
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.b.MemoryArray[4]
subtask failed:	 EGA.b.MemoryArray[4]
initial dependencies for this subtask:	 ['EGA.b.MemoryArray[4]']
task.name: TaskEntGen_b_s4  for node: b and memory returned for this: 4
dst, req_func:	 None None
REQ_FUNC_RECV_TIME:  5014500175010  at node:  b
push message at  b  msg.receiver:  ManagerType.ResourceManager
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.b.MemoryArray[0]
subtask failed:	 EGA.b.MemoryArray[0]
initial dependencies for this subtask:	 ['EGA.b.MemoryArray[0]']
task.name: TaskEntGen_b_s4  for node: b and memory returned for this: 0
dst, req_func:	 None None
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s4.MemoryArray[5]
subtask failed:	 EGA.s4.MemoryArray[5]
initial dependencies for this subtask:	 ['EGA.s4.MemoryArray[5]']
task.name: TaskEntGen_s4_b  for node: s4 and memory returned for this: 5
TASK_MANAGER_REQ_MESG curr_node: s4  dest:  b  delay:  500000000.0 and expected message recv time:  5016100175010
dst, req_func:	 b <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x15cfafc10>
REQ_FUNC_RECV_TIME:  5016100175010  at node:  b
push message at  b  msg.receiver:  ManagerType.ResourceManager
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s4.MemoryArray[9]
subtask failed:	 EGA.s4.MemoryArray[9]
initial dependencies for this subtask:	 ['EGA.s4.MemoryArray[9]']
task.name: TaskEntGen_s4_b  for node: s4 and memory returned for this: 9
TASK_MANAGER_REQ_MESG curr_node: s4  dest:  b  delay:  500000000.0 and expected message recv time:  5017700175010
dst, req_func:	 b <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x15cfaf4c0>
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.b.MemoryArray[4]
subtask failed:	 EGA.b.MemoryArray[4]
initial dependencies for this subtask:	 ['EGA.b.MemoryArray[4]']
task.name: TaskEntGen_b_s4  for node: b and memory returned for this: 4
dst, req_func:	 None None
REQ_FUNC_RECV_TIME:  5017700175010  at node:  b
push message at  b  msg.receiver:  ManagerType.ResourceManager
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.b.MemoryArray[0]
TaskEntGen_b_s4  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyLeftbs4
added a subtask to dependency  and map status is:	 [('TaskEntGen_b_s4', ['EGA.b.MemoryArray[0]'])]
checking eligibility of:	 TaskPurifyLeftbs4
subtasks_available:	 ['EGA.b.MemoryArray[0]']
dependency_subtasks name:	 EGA.b.MemoryArray[0]
inside ent_purify_action1
ReservationProtocol_b_R1
len(gen_subtask.dependents):  0
Not Making use of previously mapped purification subtask
newly created purification subtask for the gen subtask:  EGA.b.MemoryArray[0]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.b.MemoryArray[0]']
True
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.b.MemoryArray[0]
TaskPurifyLeftbs4  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapRightEndba
added a subtask to dependency  and map status is:	 [('TaskPurifyLeftbs4', ['EP_EGA.b.MemoryArray[0]'])]
checking eligibility of:	 TaskSwapRightEndba
subtasks_available:	 ['EP_EGA.b.MemoryArray[0]']
dependency_subtasks name:	 EP_EGA.b.MemoryArray[0]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.b.MemoryArray[0]']
True
task.name: TaskSwapRightEndba  for node: b and memory returned for this: 0
dst, req_func:	 None None
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s4.MemoryArray[5]
TaskEntGen_s4_b  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyRights4b
added a subtask to dependency  and map status is:	 [('TaskEntGen_s4_b', ['EGA.s4.MemoryArray[5]'])]
checking eligibility of:	 TaskPurifyRights4b
subtasks_available:	 ['EGA.s4.MemoryArray[5]']
dependency_subtasks name:	 EGA.s4.MemoryArray[5]
inside ent_purify_action2
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s4.MemoryArray[5]']
True
purification not needed
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s4.MemoryArray[5]
TaskPurifyRights4b  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapMiddleba
added a subtask to dependency  and map status is:	 [('TaskPurifyRights4b', ['EP_EGA.s4.MemoryArray[5]']), ('TaskSwapRightEnds4a', ['ESB.s4.MemoryArray[1]', 'ESB.s4.MemoryArray[2]'])]
checking eligibility of:	 TaskSwapMiddleba
subtasks_available:	 ['EP_EGA.s4.MemoryArray[5]', 'ESB.s4.MemoryArray[1]']
dependency_subtasks name:	 EP_EGA.s4.MemoryArray[5]
dependency_subtasks name:	 ESB.s4.MemoryArray[1]
inside task actin: left :a right: b and mid: s4 and self.own.name: s4
inside task actin: left_m :a right_m: b and mid: s4 and self.own.name: s4
inside ent_swap_action_middle
purify_subtask_left:  EP_EGA.s4.MemoryArray[5]
purify_subtask_right:  ESB.s4.MemoryArray[1]
Created new swap subtask
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.s4.MemoryArray[5]', 'ESB.s4.MemoryArray[1]']
True
Make use of newly created swap subtask :  ESA.s4.MemoryArray[1].s4.MemoryArray[5]
task.name: TaskSwapMiddleba  for node: s4 and memory returned for this: 1
TASK_MANAGER_REQ_MESG curr_node: s4  dest:  a  delay:  500000000.0 and expected message recv time:  5019300175010
dst, req_func:	 a <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func1 at 0x15cfaf8b0>
TASK_MANAGER_REQ_MESG curr_node: s4  dest:  b  delay:  500000000.0 and expected message recv time:  5019300175010
dst, req_func:	 b <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func2 at 0x15cfafa60>
REQ_FUNC_RECV_TIME:  5019300175010  at node:  a
push message at  a  msg.receiver:  ManagerType.ResourceManager
REQ_FUNC_RECV_TIME:  5019300175010  at node:  b
push message at  b  msg.receiver:  ManagerType.ResourceManager
Entanglement Swapping successful
########Subtask Succeeded############## subtask.protocol name ESA.s4.MemoryArray[1].s4.MemoryArray[5]
TaskSwapMiddleba  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
Entanglement swap successful between ('a', 'b.MemoryArray[0]')
########Subtask Succeeded############## subtask.protocol name ESB.a.MemoryArray[2]
TaskSwapLeftEndab  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
Entanglement swap successful between ('b', 'a.MemoryArray[2]')
########Subtask Succeeded############## subtask.protocol name ESB.b.MemoryArray[0]
TaskSwapRightEndba  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.s4.MemoryArray[9]
subtask failed:	 EGA.s4.MemoryArray[9]
initial dependencies for this subtask:	 ['EGA.s4.MemoryArray[9]']
task.name: TaskEntGen_s4_b  for node: s4 and memory returned for this: 9
TASK_MANAGER_REQ_MESG curr_node: s4  dest:  b  delay:  500000000.0 and expected message recv time:  5020900175010
dst, req_func:	 b <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_gen_action.<locals>.gen_subtask_action.<locals>.req_func at 0x15cfafee0>
_entanglement_fail:  len(self.subtask.protocols):  0
reached inside on_complete subtask failure section
########Subtask Failed############## : EGA.b.MemoryArray[4]
subtask failed:	 EGA.b.MemoryArray[4]
initial dependencies for this subtask:	 ['EGA.b.MemoryArray[4]']
task.name: TaskEntGen_b_s4  for node: b and memory returned for this: 4
dst, req_func:	 None None
REQ_FUNC_RECV_TIME:  5020900175010  at node:  b
push message at  b  msg.receiver:  ManagerType.ResourceManager
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.s4.MemoryArray[9]
TaskEntGen_s4_b  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyRights4b
added a subtask to dependency  and map status is:	 [('TaskEntGen_s4_b', ['EGA.s4.MemoryArray[9]'])]
checking eligibility of:	 TaskPurifyRights4b
subtasks_available:	 ['EGA.s4.MemoryArray[9]']
dependency_subtasks name:	 EGA.s4.MemoryArray[9]
inside ent_purify_action2
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.s4.MemoryArray[9]']
True
purification not needed
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.s4.MemoryArray[9]
TaskPurifyRights4b  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapMiddleba
added a subtask to dependency  and map status is:	 [('TaskPurifyRights4b', ['EP_EGA.s4.MemoryArray[9]']), ('TaskSwapRightEnds4a', ['ESB.s4.MemoryArray[2]'])]
checking eligibility of:	 TaskSwapMiddleba
subtasks_available:	 ['EP_EGA.s4.MemoryArray[9]', 'ESB.s4.MemoryArray[2]']
dependency_subtasks name:	 EP_EGA.s4.MemoryArray[9]
dependency_subtasks name:	 ESB.s4.MemoryArray[2]
inside task actin: left :a right: b and mid: s4 and self.own.name: s4
inside task actin: left_m :a right_m: b and mid: s4 and self.own.name: s4
inside ent_swap_action_middle
purify_subtask_left:  EP_EGA.s4.MemoryArray[9]
purify_subtask_right:  ESB.s4.MemoryArray[2]
Created new swap subtask
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.s4.MemoryArray[9]', 'ESB.s4.MemoryArray[2]']
True
Make use of newly created swap subtask :  ESA.s4.MemoryArray[2].s4.MemoryArray[9]
task.name: TaskSwapMiddleba  for node: s4 and memory returned for this: 2
TASK_MANAGER_REQ_MESG curr_node: s4  dest:  a  delay:  500000000.0 and expected message recv time:  5023700350020
dst, req_func:	 a <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func1 at 0x15cfafe50>
TASK_MANAGER_REQ_MESG curr_node: s4  dest:  b  delay:  500000000.0 and expected message recv time:  5023700350020
dst, req_func:	 b <function ReservationProtocol.set_dependencies_subtask.<locals>.ent_swap_action_middle.<locals>.swap_subtask_action.<locals>.req_func2 at 0x15cfafca0>
_entanglement_succeed:  len(self.subtask.protocols):  0
########Subtask Succeeded############## subtask.protocol name EGA.b.MemoryArray[4]
TaskEntGen_b_s4  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskPurifyLeftbs4
added a subtask to dependency  and map status is:	 [('TaskEntGen_b_s4', ['EGA.b.MemoryArray[4]'])]
checking eligibility of:	 TaskPurifyLeftbs4
subtasks_available:	 ['EGA.b.MemoryArray[4]']
dependency_subtasks name:	 EGA.b.MemoryArray[4]
inside ent_purify_action1
ReservationProtocol_b_R1
len(gen_subtask.dependents):  0
Not Making use of previously mapped purification subtask
newly created purification subtask for the gen subtask:  EGA.b.MemoryArray[4]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EGA.b.MemoryArray[4]']
True
Purification not needed
########Subtask Succeeded############## subtask.protocol name EP_EGA.b.MemoryArray[4]
TaskPurifyLeftbs4  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  1
Task name:	 TaskSwapRightEndba
added a subtask to dependency  and map status is:	 [('TaskPurifyLeftbs4', ['EP_EGA.b.MemoryArray[4]'])]
checking eligibility of:	 TaskSwapRightEndba
subtasks_available:	 ['EP_EGA.b.MemoryArray[4]']
dependency_subtasks name:	 EP_EGA.b.MemoryArray[4]
len(subtasks):	 1
subtask:	self.dependencies in is_eligible_to_run ['EP_EGA.b.MemoryArray[4]']
True
task.name: TaskSwapRightEndba  for node: b and memory returned for this: 4
dst, req_func:	 None None
REQ_FUNC_RECV_TIME:  5023700350020  at node:  a
push message at  a  msg.receiver:  ManagerType.ResourceManager
REQ_FUNC_RECV_TIME:  5023700350020  at node:  b
push message at  b  msg.receiver:  ManagerType.ResourceManager
Entanglement Swapping successful
########Subtask Succeeded############## subtask.protocol name ESA.s4.MemoryArray[2].s4.MemoryArray[9]
TaskSwapMiddleba  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
Entanglement swap successful between ('a', 'b.MemoryArray[4]')
########Subtask Succeeded############## subtask.protocol name ESB.a.MemoryArray[3]
TaskSwapLeftEndab  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
Entanglement swap successful between ('b', 'a.MemoryArray[3]')
########Subtask Succeeded############## subtask.protocol name ESB.b.MemoryArray[4]
TaskSwapRightEndba  Task flag value:  False
In subtask_success
subtask.dependents:  0
dependent_tasks for this:  0
a memories
+---------+---------------+------------------+------------+---------------------+---------------+-----------+
|   Index | Source node   | Entangled Node   |   Fidelity |   Entanglement Time |   Expire Time | State     |
+=========+===============+==================+============+=====================+===============+===========+
|       0 | a             | b                |   0.581843 |              5.0059 |        5.0059 | ENTANGLED |
+---------+---------------+------------------+------------+---------------------+---------------+-----------+
|       1 | a             | b                |   0.581843 |              5.0075 |        5.0075 | ENTANGLED |
+---------+---------------+------------------+------------+---------------------+---------------+-----------+
|       2 | a             | b                |   0.581843 |              5.0203 |        5.0203 | ENTANGLED |
+---------+---------------+------------------+------------+---------------------+---------------+-----------+
|       3 | a             | b                |   0.581843 |              5.0247 |        5.0247 | ENTANGLED |
+---------+---------------+------------------+------------+---------------------+---------------+-----------+
|       4 | a             | b                |   0.581843 |              5.0139 |        5.0139 | ENTANGLED |
+---------+---------------+------------------+------------+---------------------+---------------+-----------+
b memories
+---------+---------------+------------------+------------+---------------------+---------------+-----------+
|   Index | Source node   | Entangled Node   |   Fidelity |   Entanglement Time |   Expire Time | State     |
+=========+===============+==================+============+=====================+===============+===========+
|       0 | b             | a                |   0.581843 |              5.0203 |        5.0203 | ENTANGLED |
+---------+---------------+------------------+------------+---------------------+---------------+-----------+
|       1 | b             | a                |   0.581843 |              5.0059 |        5.0059 | ENTANGLED |
+---------+---------------+------------------+------------+---------------------+---------------+-----------+
|       2 | b             | a                |   0.581843 |              5.0075 |        5.0075 | ENTANGLED |
+---------+---------------+------------------+------------+---------------------+---------------+-----------+
|       3 | b             | a                |   0.581843 |              5.0139 |        5.0139 | ENTANGLED |
+---------+---------------+------------------+------------+---------------------+---------------+-----------+
|       4 | b             | a                |   0.581843 |              5.0247 |        5.0247 | ENTANGLED |
+---------+---------------+------------------+------------+---------------------+---------------+-----------+
s1 memories
+---------+---------------+------------------+------------+---------------------+---------------+---------+
| Index   | Source node   | Entangled Node   | Fidelity   | Entanglement Time   | Expire Time   | State   |
+=========+===============+==================+============+=====================+===============+=========+
+---------+---------------+------------------+------------+---------------------+---------------+---------+
s2 memories
+---------+---------------+------------------+------------+---------------------+---------------+---------+
| Index   | Source node   | Entangled Node   | Fidelity   | Entanglement Time   | Expire Time   | State   |
+=========+===============+==================+============+=====================+===============+=========+
+---------+---------------+------------------+------------+---------------------+---------------+---------+
s3 memories
+---------+---------------+------------------+------------+---------------------+---------------+---------+
| Index   | Source node   | Entangled Node   | Fidelity   | Entanglement Time   | Expire Time   | State   |
+=========+===============+==================+============+=====================+===============+=========+
+---------+---------------+------------------+------------+---------------------+---------------+---------+
s4 memories
+---------+---------------+------------------+------------+---------------------+---------------+---------+
| Index   | Source node   | Entangled Node   | Fidelity   | Entanglement Time   | Expire Time   | State   |
+=========+===============+==================+============+=====================+===============+=========+
+---------+---------------+------------------+------------+---------------------+---------------+---------+
